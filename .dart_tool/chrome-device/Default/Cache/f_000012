define(['dart_sdk', 'packages/mobx/src/utils.dart'], (function load__packages__mobx__src__api__extensions_dart(dart_sdk, packages__mobx__src__utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const utils = packages__mobx__src__utils$46dart.src__utils;
  var extensions = Object.create(dart.library);
  var atom_extensions = Object.create(dart.library);
  var reaction = Object.create(dart.library);
  var observable_collections = Object.create(dart.library);
  var async$ = Object.create(dart.library);
  var core$ = Object.create(dart.library);
  var context$ = Object.create(dart.library);
  var action = Object.create(dart.library);
  var mobx = Object.create(dart.library);
  var $length = dartx.length;
  var $sublist = dartx.sublist;
  var $plus = dartx['+'];
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $addAll = dartx.addAll;
  var $toList = dartx.toList;
  var $iterator = dartx.iterator;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $lastWhere = dartx.lastWhere;
  var $single = dartx.single;
  var $asMap = dartx.asMap;
  var $cast = dartx.cast;
  var $first = dartx.first;
  var $clear = dartx.clear;
  var $fillRange = dartx.fillRange;
  var $insert = dartx.insert;
  var $insertAll = dartx.insertAll;
  var $indexOf = dartx.indexOf;
  var $removeAt = dartx.removeAt;
  var $removeLast = dartx.removeLast;
  var $removeRange = dartx.removeRange;
  var $replaceRange = dartx.replaceRange;
  var $setAll = dartx.setAll;
  var $skip = dartx.skip;
  var $take = dartx.take;
  var $setRange = dartx.setRange;
  var $shuffle = dartx.shuffle;
  var $sort = dartx.sort;
  var $containsKey = dartx.containsKey;
  var $forEach = dartx.forEach;
  var $keys = dartx.keys;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $contains = dartx.contains;
  var $toSet = dartx.toSet;
  var $toString = dartx.toString;
  var $stackTrace = dartx.stackTrace;
  var $map = dartx.map;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    ReactiveContextL: () => (T$.ReactiveContextL = dart.constFn(dart.legacy(core$.ReactiveContext)))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    VoidToLvoid: () => (T$.VoidToLvoid = dart.constFn(dart.legacy(T$.VoidTovoid())))(),
    TLAndTLAndFnTovoid: () => (T$.TLAndTLAndFnTovoid = dart.constFn(dart.gFnType(T => {
      var TL = () => (TL = dart.constFn(dart.legacy(T)))();
      return [dart.void, [TL(), TL(), T$.VoidToLvoid()]];
    })))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    ElementChangeL: () => (T$.ElementChangeL = dart.constFn(dart.legacy(observable_collections.ElementChange)))(),
    ListQueueOfElementChangeL: () => (T$.ListQueueOfElementChangeL = dart.constFn(collection.ListQueue$(T$.ElementChangeL())))(),
    JSArrayOfElementChangeL: () => (T$.JSArrayOfElementChangeL = dart.constFn(_interceptors.JSArray$(T$.ElementChangeL())))(),
    RangeChangeL: () => (T$.RangeChangeL = dart.constFn(dart.legacy(observable_collections.RangeChange)))(),
    JSArrayOfRangeChangeL: () => (T$.JSArrayOfRangeChangeL = dart.constFn(_interceptors.JSArray$(T$.RangeChangeL())))(),
    VoidTodynamic: () => (T$.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    FutureStatusL: () => (T$.FutureStatusL = dart.constFn(dart.legacy(async$.FutureStatus)))(),
    ObservableOfFutureStatusL: () => (T$.ObservableOfFutureStatusL = dart.constFn(core$.Observable$(T$.FutureStatusL())))(),
    StreamStatusL: () => (T$.StreamStatusL = dart.constFn(dart.legacy(async$.StreamStatus)))(),
    _ValueTypeL: () => (T$._ValueTypeL = dart.constFn(dart.legacy(async$._ValueType)))(),
    ObservableOfStreamStatusL: () => (T$.ObservableOfStreamStatusL = dart.constFn(core$.Observable$(T$.StreamStatusL())))(),
    ObservableOf_ValueTypeL: () => (T$.ObservableOf_ValueTypeL = dart.constFn(core$.Observable$(T$._ValueTypeL())))(),
    StackTraceL: () => (T$.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    SymbolL: () => (T$.SymbolL = dart.constFn(dart.legacy(core.Symbol)))(),
    MapEntryOfSymbolL$dynamic: () => (T$.MapEntryOfSymbolL$dynamic = dart.constFn(core.MapEntry$(T$.SymbolL(), dart.dynamic)))(),
    MapEntryLOfSymbolL$dynamic: () => (T$.MapEntryLOfSymbolL$dynamic = dart.constFn(dart.legacy(T$.MapEntryOfSymbolL$dynamic())))(),
    StringLAnddynamicToMapEntryLOfSymbolL$dynamic: () => (T$.StringLAnddynamicToMapEntryLOfSymbolL$dynamic = dart.constFn(dart.fnType(T$.MapEntryLOfSymbolL$dynamic(), [T$.StringL(), dart.dynamic])))(),
    _ListenerKindL: () => (T$._ListenerKindL = dart.constFn(dart.legacy(core$._ListenerKind)))(),
    DerivationL: () => (T$.DerivationL = dart.constFn(dart.legacy(core$.Derivation)))(),
    LinkedHashSetOfDerivationL: () => (T$.LinkedHashSetOfDerivationL = dart.constFn(collection.LinkedHashSet$(T$.DerivationL())))(),
    VoidToLdynamic: () => (T$.VoidToLdynamic = dart.constFn(dart.legacy(T$.VoidTodynamic())))(),
    SetOfVoidToLdynamic: () => (T$.SetOfVoidToLdynamic = dart.constFn(core.Set$(T$.VoidToLdynamic())))(),
    SetLOfVoidToLdynamic: () => (T$.SetLOfVoidToLdynamic = dart.constFn(dart.legacy(T$.SetOfVoidToLdynamic())))(),
    LinkedMapOf_ListenerKindL$SetLOfVoidToLdynamic: () => (T$.LinkedMapOf_ListenerKindL$SetLOfVoidToLdynamic = dart.constFn(_js_helper.LinkedMap$(T$._ListenerKindL(), T$.SetLOfVoidToLdynamic())))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidToLdynamic()])))(),
    LinkedHashSetOfVoidToLdynamic: () => (T$.LinkedHashSetOfVoidToLdynamic = dart.constFn(collection.LinkedHashSet$(T$.VoidToLdynamic())))(),
    FnToboolL: () => (T$.FnToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.VoidToLdynamic()])))(),
    OperationTypeL: () => (T$.OperationTypeL = dart.constFn(dart.legacy(core$.OperationType)))(),
    AtomL: () => (T$.AtomL = dart.constFn(dart.legacy(core$.Atom)))(),
    LinkedHashSetOfAtomL: () => (T$.LinkedHashSetOfAtomL = dart.constFn(collection.LinkedHashSet$(T$.AtomL())))(),
    ReactionL: () => (T$.ReactionL = dart.constFn(dart.legacy(core$.Reaction)))(),
    ReactionLToNull: () => (T$.ReactionLToNull = dart.constFn(dart.fnType(core.Null, [T$.ReactionL()])))(),
    JSArrayOfReactionL: () => (T$.JSArrayOfReactionL = dart.constFn(_interceptors.JSArray$(T$.ReactionL())))(),
    JSArrayOfAtomL: () => (T$.JSArrayOfAtomL = dart.constFn(_interceptors.JSArray$(T$.AtomL())))(),
    SpyEventL: () => (T$.SpyEventL = dart.constFn(dart.legacy(core$.SpyEvent)))(),
    SpyEventLTovoid: () => (T$.SpyEventLTovoid = dart.constFn(dart.fnType(dart.void, [T$.SpyEventL()])))(),
    SpyEventLToLvoid: () => (T$.SpyEventLToLvoid = dart.constFn(dart.legacy(T$.SpyEventLTovoid())))(),
    JSArrayOfSpyEventLToLvoid: () => (T$.JSArrayOfSpyEventLToLvoid = dart.constFn(_interceptors.JSArray$(T$.SpyEventLToLvoid())))(),
    ReactiveReadPolicyL: () => (T$.ReactiveReadPolicyL = dart.constFn(dart.legacy(core$.ReactiveReadPolicy)))(),
    ReactiveWritePolicyL: () => (T$.ReactiveWritePolicyL = dart.constFn(dart.legacy(core$.ReactiveWritePolicy)))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    ObjectLAndReactionLTovoid: () => (T$.ObjectLAndReactionLTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectL(), T$.ReactionL()])))(),
    ObjectLAndReactionLToLvoid: () => (T$.ObjectLAndReactionLToLvoid = dart.constFn(dart.legacy(T$.ObjectLAndReactionLTovoid())))(),
    LinkedHashSetOfObjectLAndReactionLToLvoid: () => (T$.LinkedHashSetOfObjectLAndReactionLToLvoid = dart.constFn(collection.LinkedHashSet$(T$.ObjectLAndReactionLToLvoid())))(),
    ComputedL: () => (T$.ComputedL = dart.constFn(dart.legacy(core$.Computed)))(),
    VoidToboolL: () => (T$.VoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [])))(),
    MobXCaughtExceptionL: () => (T$.MobXCaughtExceptionL = dart.constFn(dart.legacy(core$.MobXCaughtException)))(),
    FnToboolL$1: () => (T$.FnToboolL$1 = dart.constFn(dart.fnType(T$.boolL(), [T$.ObjectLAndReactionLToLvoid()])))(),
    FnToNull: () => (T$.FnToNull = dart.constFn(dart.fnType(core.Null, [T$.ObjectLAndReactionLToLvoid()])))(),
    DerivationStateL: () => (T$.DerivationStateL = dart.constFn(dart.legacy(core$.DerivationState)))(),
    FunctionL: () => (T$.FunctionL = dart.constFn(dart.legacy(core.Function)))(),
    _HashSetOfFunctionL: () => (T$._HashSetOfFunctionL = dart.constFn(collection._HashSet$(T$.FunctionL())))(),
    WillChangeNotificationL: () => (T$.WillChangeNotificationL = dart.constFn(dart.legacy(core$.WillChangeNotification)))(),
    ActionControllerL: () => (T$.ActionControllerL = dart.constFn(dart.legacy(core$.ActionController)))(),
    FnAndAtomL__Tovoid: () => (T$.FnAndAtomL__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidToLvoid(), T$.AtomL()], {actionController: T$.ActionControllerL(), name: T$.StringL()}, {})))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    ObjectLAndReactionLToNull: () => (T$.ObjectLAndReactionLToNull = dart.constFn(dart.fnType(core.Null, [T$.ObjectL(), T$.ReactionL()])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core$.OperationType.prototype,
        [_name$]: "OperationType.update",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.fn(async$.AsyncAction._noOp, T$.VoidTodynamic());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: async$.FutureStatus.prototype,
        [_name$0]: "FutureStatus.pending",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: async$.FutureStatus.prototype,
        [_name$0]: "FutureStatus.rejected",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: async$.FutureStatus.prototype,
        [_name$0]: "FutureStatus.fulfilled",
        index: 2
      });
    },
    get C5() {
      return C[5] = dart.constList([C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], T$.FutureStatusL());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: async$.StreamStatus.prototype,
        [_name$0]: "StreamStatus.waiting",
        index: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: async$.StreamStatus.prototype,
        [_name$0]: "StreamStatus.active",
        index: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: async$.StreamStatus.prototype,
        [_name$0]: "StreamStatus.done",
        index: 2
      });
    },
    get C9() {
      return C[9] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8], T$.StreamStatusL());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: async$._ValueType.prototype,
        [_name$0]: "_ValueType.value",
        index: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: async$._ValueType.prototype,
        [_name$0]: "_ValueType.error",
        index: 1
      });
    },
    get C12() {
      return C[12] = dart.constList([C[10] || CT.C10, C[11] || CT.C11], T$._ValueTypeL());
    },
    get C13() {
      return C[13] = dart.constList([], dart.dynamic);
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: core$._ListenerKind.prototype,
        [_name$]: "_ListenerKind.onBecomeObserved",
        index: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: core$._ListenerKind.prototype,
        [_name$]: "_ListenerKind.onBecomeUnobserved",
        index: 1
      });
    },
    get C16() {
      return C[16] = dart.constList([C[14] || CT.C14, C[15] || CT.C15], T$._ListenerKindL());
    },
    get C17() {
      return C[17] = dart.fn(core$.Atom._notifyListener, T$.FnTovoid());
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: core$.OperationType.prototype,
        [_name$]: "OperationType.add",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: core$.OperationType.prototype,
        [_name$]: "OperationType.remove",
        index: 2
      });
    },
    get C20() {
      return C[20] = dart.constList([C[18] || CT.C18, C[0] || CT.C0, C[19] || CT.C19], T$.OperationTypeL());
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: core$.ReactiveReadPolicy.prototype,
        [_name$]: "ReactiveReadPolicy.always",
        index: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: core$.ReactiveReadPolicy.prototype,
        [_name$]: "ReactiveReadPolicy.never",
        index: 1
      });
    },
    get C23() {
      return C[23] = dart.constList([C[21] || CT.C21, C[22] || CT.C22], T$.ReactiveReadPolicyL());
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: core$.ReactiveWritePolicy.prototype,
        [_name$]: "ReactiveWritePolicy.observed",
        index: 0
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: core$.ReactiveWritePolicy.prototype,
        [_name$]: "ReactiveWritePolicy.always",
        index: 1
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: core$.ReactiveWritePolicy.prototype,
        [_name$]: "ReactiveWritePolicy.never",
        index: 2
      });
    },
    get C27() {
      return C[27] = dart.constList([C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26], T$.ReactiveWritePolicyL());
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.upToDate",
        index: 1
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.notTracking",
        index: 0
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.stale",
        index: 3
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.possiblyStale",
        index: 2
      });
    },
    get C32() {
      return C[32] = dart.constList([C[29] || CT.C29, C[28] || CT.C28, C[31] || CT.C31, C[30] || CT.C30], T$.DerivationStateL());
    }
  }, false);
  var C = Array(33).fill(void 0);
  var I = [
    "package:mobx/src/api/observable_collections.dart",
    "file:///D:/desenvolvimento/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-1.2.1+4/lib/src/api/observable_collections/observable_list.dart",
    "file:///D:/desenvolvimento/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-1.2.1+4/lib/src/api/observable_collections/observable_set.dart",
    "file:///D:/desenvolvimento/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-1.2.1+4/lib/src/api/async/async_action.dart",
    "package:mobx/src/api/async.dart",
    "package:mobx/src/core.dart",
    "file:///D:/desenvolvimento/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-1.2.1+4/lib/src/core/context.dart",
    "file:///D:/desenvolvimento/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-1.2.1+4/lib/src/core/notification_handlers.dart",
    "file:///D:/desenvolvimento/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-1.2.1+4/lib/src/core/reaction.dart",
    "file:///D:/desenvolvimento/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-1.2.1+4/lib/src/core/spy.dart"
  ];
  extensions['ObservableFutureExtension|asObservable'] = function ObservableFutureExtension$124asObservable(T, $this, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (async$.ObservableFuture$(dart.legacy(T))).new($this, {context: context, name: name});
  };
  extensions['ObservableFutureExtension|get#asObservable'] = function ObservableFutureExtension$124get$35asObservable(T, $this) {
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableFutureExtension|asObservable'](dart.legacy(T), $this, {context: context, name: name});
    }, dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [], {context: T$.ReactiveContextL(), name: T$.StringL()}, {}));
  };
  extensions['ObservableListExtension|asObservable'] = function ObservableListExtension$124asObservable(T, $this, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (observable_collections.ObservableList$(dart.legacy(T))).of($this, {context: context, name: name});
  };
  extensions['ObservableListExtension|get#asObservable'] = function ObservableListExtension$124get$35asObservable(T, $this) {
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableListExtension|asObservable'](dart.legacy(T), $this, {context: context, name: name});
    }, dart.fnType(dart.legacy(observable_collections.ObservableList$(dart.legacy(T))), [], {context: T$.ReactiveContextL(), name: T$.StringL()}, {}));
  };
  extensions['ObservableMapExtension|asObservable'] = function ObservableMapExtension$124asObservable(K, V, $this, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (observable_collections.ObservableMap$(dart.legacy(K), dart.legacy(V))).of($this, {context: context, name: name});
  };
  extensions['ObservableMapExtension|get#asObservable'] = function ObservableMapExtension$124get$35asObservable(K, V, $this) {
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableMapExtension|asObservable'](dart.legacy(K), dart.legacy(V), $this, {context: context, name: name});
    }, dart.fnType(dart.legacy(observable_collections.ObservableMap$(dart.legacy(K), dart.legacy(V))), [], {context: T$.ReactiveContextL(), name: T$.StringL()}, {}));
  };
  extensions['ObservableSetExtension|asObservable'] = function ObservableSetExtension$124asObservable(T, $this, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (observable_collections.ObservableSet$(dart.legacy(T))).of($this, {context: context, name: name});
  };
  extensions['ObservableSetExtension|get#asObservable'] = function ObservableSetExtension$124get$35asObservable(T, $this) {
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableSetExtension|asObservable'](dart.legacy(T), $this, {context: context, name: name});
    }, dart.fnType(dart.legacy(observable_collections.ObservableSet$(dart.legacy(T))), [], {context: T$.ReactiveContextL(), name: T$.StringL()}, {}));
  };
  extensions['ObservableStreamExtension|asObservable'] = function ObservableStreamExtension$124asObservable(T, $this, opts) {
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (async$.ObservableStream$(dart.legacy(T))).new($this, {initialValue: initialValue, cancelOnError: cancelOnError, context: context, name: name});
  };
  extensions['ObservableStreamExtension|get#asObservable'] = function ObservableStreamExtension$124get$35asObservable(T, $this) {
    return dart.fn(opts => {
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableStreamExtension|asObservable'](dart.legacy(T), $this, {initialValue: initialValue, cancelOnError: cancelOnError, context: context, name: name});
    }, dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [], {cancelOnError: T$.boolL(), context: T$.ReactiveContextL(), initialValue: dart.legacy(T), name: T$.StringL()}, {}));
  };
  atom_extensions['AtomSpyReporter|reportRead'] = function AtomSpyReporter$124reportRead($this) {
    $this.context.enforceReadPolicy($this);
    $this.reportObserved();
  };
  atom_extensions['AtomSpyReporter|get#reportRead'] = function AtomSpyReporter$124get$35reportRead($this) {
    return dart.fn(() => atom_extensions['AtomSpyReporter|reportRead']($this), T$.VoidTovoid());
  };
  atom_extensions['AtomSpyReporter|reportWrite'] = function AtomSpyReporter$124reportWrite(T, $this, newValue, oldValue, setNewValue) {
    $this.context.spyReport(new core$.ObservableValueSpyEvent.new($this, {newValue: newValue, oldValue: oldValue, name: $this.name}));
    core$['ConditionalAction|conditionallyRunInAction']($this.context, dart.fn(() => {
      setNewValue();
      $this.reportChanged();
    }, T$.VoidToNull()), $this, {name: dart.str($this.name) + "_set"});
    $this.context.spyReport(new core$.EndedSpyEvent.new({type: "observable", name: $this.name}));
  };
  atom_extensions['AtomSpyReporter|get#reportWrite'] = function AtomSpyReporter$124get$35reportWrite($this) {
    return dart.fn((T, newValue, oldValue, setNewValue) => atom_extensions['AtomSpyReporter|reportWrite'](dart.legacy(T), $this, newValue, oldValue, setNewValue), T$.TLAndTLAndFnTovoid());
  };
  reaction.autorun = function autorun(fn, opts) {
    let t14;
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return core$.createAutorun((t14 = context, t14 == null ? context$.mainContext : t14), fn, {name: name, delay: delay, onError: onError});
  };
  reaction.reaction = function reaction$(T, fn, effect, opts) {
    let t14;
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
    let equals = opts && 'equals' in opts ? opts.equals : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return core$.createReaction(dart.legacy(T), (t14 = context, t14 == null ? context$.mainContext : t14), fn, effect, {name: name, delay: delay, equals: equals, fireImmediately: fireImmediately, onError: onError});
  };
  reaction.when = function when(predicate, effect, opts) {
    let t14;
    let name = opts && 'name' in opts ? opts.name : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return core$.createWhenReaction((t14 = context, t14 == null ? context$.mainContext : t14), predicate, effect, {name: name, timeout: timeout, onError: onError});
  };
  reaction.asyncWhen = function asyncWhen(predicate, opts) {
    let t14;
    let name = opts && 'name' in opts ? opts.name : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let context = opts && 'context' in opts ? opts.context : null;
    return core$.createAsyncWhenReaction((t14 = context, t14 == null ? context$.mainContext : t14), predicate, {name: name, timeout: timeout});
  };
  var _listenersField = dart.privateName(observable_collections, "_listenersField");
  var _atom$ = dart.privateName(observable_collections, "_atom");
  var _list$ = dart.privateName(observable_collections, "_list");
  var _context$ = dart.privateName(observable_collections, "_context");
  var _listeners = dart.privateName(observable_collections, "_listeners");
  var _notifyRangeUpdate = dart.privateName(observable_collections, "_notifyRangeUpdate");
  var _notifyElementUpdate = dart.privateName(observable_collections, "_notifyElementUpdate");
  var _notifyElementsUpdate = dart.privateName(observable_collections, "_notifyElementsUpdate");
  var _name$ = dart.privateName(core$, "_name");
  const _is_ObservableList_default = Symbol('_is_ObservableList_default');
  observable_collections.ObservableList$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var JSArrayOfTL = () => (JSArrayOfTL = dart.constFn(_interceptors.JSArray$(TL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListChangeOfTL = () => (ListChangeOfTL = dart.constFn(observable_collections.ListChange$(TL())))();
    var ListChangeLOfTL = () => (ListChangeLOfTL = dart.constFn(dart.legacy(ListChangeOfTL())))();
    var ListenersOfListChangeLOfTL = () => (ListenersOfListChangeLOfTL = dart.constFn(core$.Listeners$(ListChangeLOfTL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var VoidToTL = () => (VoidToTL = dart.constFn(dart.fnType(TL(), [])))();
    var VoidToLTL = () => (VoidToLTL = dart.constFn(dart.legacy(VoidToTL())))();
    var ObservableMapOfintL$TL = () => (ObservableMapOfintL$TL = dart.constFn(observable_collections.ObservableMap$(T$.intL(), TL())))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(dart.legacy(T)));
    class ObservableList extends Object_ListMixin$36 {
      get [_listeners]() {
        let t14;
        t14 = this[_listenersField];
        return t14 == null ? this[_listenersField] = new (ListenersOfListChangeLOfTL()).new(this[_context$]) : t14;
      }
      get name() {
        return this[_atom$].name;
      }
      get length() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$length];
      }
      set length(value) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(value) < dart.notNull(this[_list$][$length])) {
            let removed = this[_list$][$sublist](value);
            this[_list$][$length] = value;
            this[_notifyRangeUpdate](value, null, removed);
          } else if (dart.notNull(value) > dart.notNull(this[_list$][$length])) {
            let index = this[_list$][$length];
            this[_list$][$length] = value;
            this[_notifyRangeUpdate](index, this[_list$][$sublist](index), null);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      ['+'](other) {
        ListLOfTL().as(other);
        this[_context$].enforceReadPolicy(this[_atom$]);
        let newList = this[_list$][$plus](other);
        this[_atom$].reportObserved();
        return newList;
      }
      _get(index) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        TL().as(value);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let oldValue = this[_list$][$_get](index);
          if (!dart.equals(oldValue, value)) {
            this[_list$][$_set](index, value);
            this[_notifyElementUpdate](index, value, oldValue);
          }
        }, T$.VoidToNull()), this[_atom$]);
        return value$;
      }
      add(element) {
        TL().as(element);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let index = this[_list$][$length];
          this[_list$][$add](element);
          this[_notifyElementUpdate](index, element, null, {type: core$.OperationType.add});
        }, T$.VoidToNull()), this[_atom$]);
      }
      addAll(iterable) {
        IterableLOfTL().as(iterable);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(iterable[$isNotEmpty])) {
            let index = this[_list$][$length];
            this[_list$][$addAll](iterable);
            this[_notifyRangeUpdate](index, iterable[$toList]({growable: false}), null);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      get iterator() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$iterator];
      }
      lastIndexWhere(test, start = null) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$lastIndexWhere](test, start);
      }
      lastWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLTL().as(orElse);
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$lastWhere](test, {orElse: orElse});
      }
      get single() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$single];
      }
      sublist(start, end = null) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$sublist](start, end);
      }
      asMap() {
        return new (ObservableMapOfintL$TL())._wrap(this[_context$], this[_list$][$asMap](), this[_atom$]);
      }
      cast(R) {
        return new (observable_collections.ObservableList$(dart.legacy(R)))._wrap(this[_context$], this[_atom$], this[_list$][$cast](dart.legacy(R)));
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$toList]({growable: growable});
      }
      set first(value) {
        TL().as(value);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let oldValue = this[_list$][$first];
          if (!dart.equals(oldValue, value)) {
            this[_list$][$first] = value;
            this[_notifyElementUpdate](0, value, oldValue);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      get first() {
        return super.first;
      }
      clear() {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_list$][$isNotEmpty])) {
            let oldItems = this[_list$][$toList]({growable: false});
            this[_list$][$clear]();
            this[_notifyRangeUpdate](0, null, oldItems);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      fillRange(start, end, fill = null) {
        TL().as(fill);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start)) {
            let oldContents = this[_list$][$sublist](start, end);
            this[_list$][$fillRange](start, end, fill);
            let newContents = this[_list$][$sublist](start, end);
            this[_notifyRangeUpdate](start, newContents, oldContents);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      insert(index, element) {
        TL().as(element);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          this[_list$][$insert](index, element);
          this[_notifyElementUpdate](index, element, null, {type: core$.OperationType.add});
        }, T$.VoidToNull()), this[_atom$]);
      }
      insertAll(index, iterable) {
        IterableLOfTL().as(iterable);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(iterable[$isNotEmpty])) {
            this[_list$][$insertAll](index, iterable);
            this[_notifyRangeUpdate](index, iterable[$toList]({growable: false}), null);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      remove(element) {
        let didRemove = false;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let index = this[_list$][$indexOf](TL().as(element));
          if (dart.notNull(index) >= 0) {
            this[_list$][$removeAt](index);
            this[_notifyElementUpdate](index, null, TL().as(element), {type: core$.OperationType.remove});
            didRemove = true;
          }
        }, T$.VoidToNull()), this[_atom$]);
        return didRemove;
      }
      removeAt(index) {
        let value = null;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          value = this[_list$][$removeAt](index);
          this[_notifyElementUpdate](index, null, value, {type: core$.OperationType.remove});
        }, T$.VoidToNull()), this[_atom$]);
        return value;
      }
      removeLast() {
        let value = null;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          value = this[_list$][$removeLast]();
          this[_notifyElementUpdate](this[_list$][$length], null, value, {type: core$.OperationType.remove});
        }, T$.VoidToNull()), this[_atom$]);
        return value;
      }
      removeRange(start, end) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start)) {
            let removedItems = this[_list$][$sublist](start, end);
            this[_list$][$removeRange](start, end);
            this[_notifyRangeUpdate](start, null, removedItems);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      removeWhere(test) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let removedElements = new (T$.ListQueueOfElementChangeL()).new();
          for (let i = dart.notNull(this[_list$][$length]) - 1; i >= 0; i = i - 1) {
            let element = this[_list$][$_get](i);
            if (dart.test(test(element))) {
              removedElements.addFirst(new observable_collections.ElementChange.new({index: i, oldValue: element, type: core$.OperationType.remove}));
              this[_list$][$removeAt](i);
            }
          }
          if (dart.test(removedElements[$isNotEmpty])) {
            this[_notifyElementsUpdate](removedElements[$toList]({growable: false}));
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      replaceRange(start, end, newContents) {
        IterableLOfTL().as(newContents);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start) || dart.test(newContents[$isNotEmpty])) {
            let oldContents = this[_list$][$sublist](start, end);
            this[_list$][$replaceRange](start, end, newContents);
            this[_notifyRangeUpdate](start, newContents[$toList]({growable: false}), oldContents);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      retainWhere(test) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let removedElements = new (T$.ListQueueOfElementChangeL()).new();
          for (let i = dart.notNull(this[_list$][$length]) - 1; i >= 0; i = i - 1) {
            let element = this[_list$][$_get](i);
            if (!dart.test(test(element))) {
              removedElements.addFirst(new observable_collections.ElementChange.new({index: i, oldValue: element, type: core$.OperationType.remove}));
              this[_list$][$removeAt](i);
            }
          }
          if (dart.test(removedElements[$isNotEmpty])) {
            this[_notifyElementsUpdate](removedElements[$toList]({growable: false}));
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      setAll(index, iterable) {
        IterableLOfTL().as(iterable);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(iterable[$isNotEmpty])) {
            let oldValues = this[_list$][$sublist](index, dart.notNull(index) + dart.notNull(iterable[$length]));
            let newValues = iterable[$toList]({growable: false});
            this[_list$][$setAll](index, iterable);
            this[_notifyRangeUpdate](index, newValues, oldValues);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      setRange(start, end, iterable, skipCount = 0) {
        IterableLOfTL().as(iterable);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start)) {
            let oldValues = this[_list$][$sublist](start, end);
            let newValues = iterable[$skip](skipCount)[$take](dart.notNull(end) - dart.notNull(start))[$toList]({growable: false});
            this[_list$][$setRange](start, end, iterable, skipCount);
            this[_notifyRangeUpdate](start, newValues, oldValues);
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      shuffle(random = null) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_list$][$isNotEmpty])) {
            let oldList = this[_list$][$toList]({growable: false});
            this[_list$][$shuffle](random);
            let changes = T$.JSArrayOfElementChangeL().of([]);
            for (let i = 0; i < dart.notNull(this[_list$][$length]); i = i + 1) {
              let oldValue = oldList[$_get](i);
              let newValue = this[_list$][$_get](i);
              if (!dart.equals(newValue, oldValue)) {
                changes[$add](new observable_collections.ElementChange.new({index: i, oldValue: oldValue, newValue: newValue}));
              }
            }
            if (dart.test(changes[$isNotEmpty])) {
              this[_notifyElementsUpdate](changes);
            }
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      sort(compare = null) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_list$][$isNotEmpty])) {
            let oldList = this[_list$][$toList]({growable: false});
            this[_list$][$sort](compare);
            let changes = T$.JSArrayOfElementChangeL().of([]);
            for (let i = 0; i < dart.notNull(this[_list$][$length]); i = i + 1) {
              let oldValue = oldList[$_get](i);
              let newValue = this[_list$][$_get](i);
              if (!dart.equals(newValue, oldValue)) {
                changes[$add](new observable_collections.ElementChange.new({index: i, oldValue: oldValue, newValue: newValue}));
              }
            }
            if (dart.test(changes[$isNotEmpty])) {
              this[_notifyElementsUpdate](changes);
            }
          }
        }, T$.VoidToNull()), this[_atom$]);
      }
      observe(listener, opts) {
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
        if (fireImmediately === true) {
          let change = new (ListChangeOfTL()).new({list: this, rangeChanges: T$.JSArrayOfRangeChangeL().of([new observable_collections.RangeChange.new({index: 0, newValues: this.toList({growable: false})})])});
          listener(change);
        }
        return this[_listeners].add(listener);
      }
      [_notifyElementUpdate](index, newValue, oldValue, opts) {
        let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
        this[_atom$].reportChanged();
        let change = new (ListChangeOfTL()).new({list: this, elementChanges: T$.JSArrayOfElementChangeL().of([new observable_collections.ElementChange.new({index: index, newValue: newValue, oldValue: oldValue, type: type})])});
        this[_listeners].notifyListeners(change);
      }
      [_notifyElementsUpdate](elementChanges) {
        this[_atom$].reportChanged();
        let change = new (ListChangeOfTL()).new({list: this, elementChanges: elementChanges});
        this[_listeners].notifyListeners(change);
      }
      [_notifyRangeUpdate](index, newValues, oldValues) {
        this[_atom$].reportChanged();
        let change = new (ListChangeOfTL()).new({list: this, rangeChanges: T$.JSArrayOfRangeChangeL().of([new observable_collections.RangeChange.new({index: index, newValues: newValues, oldValues: oldValues})])});
        this[_listeners].notifyListeners(change);
      }
    }
    (ObservableList.new = function(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableList._wrap.call(this, context, observable_collections._observableListAtom(TL(), context, name), JSArrayOfTL().of([]));
    }).prototype = ObservableList.prototype;
    (ObservableList.of = function(elements, opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableList._wrap.call(this, context, observable_collections._observableListAtom(TL(), context, name), ListOfTL().of(elements, {growable: true}));
    }).prototype = ObservableList.prototype;
    (ObservableList._wrap = function(context, _atom, _list) {
      let t14;
      this[_listenersField] = null;
      this[_atom$] = _atom;
      this[_list$] = _list;
      this[_context$] = (t14 = context, t14 == null ? context$.mainContext : t14);
      ;
    }).prototype = ObservableList.prototype;
    dart.addTypeTests(ObservableList);
    ObservableList.prototype[_is_ObservableList_default] = true;
    dart.addTypeCaches(ObservableList);
    ObservableList[dart.implements] = () => [core$.Listenable$(dart.legacy(observable_collections.ListChange$(dart.legacy(T))))];
    dart.setMethodSignature(ObservableList, () => ({
      __proto__: dart.getMethods(ObservableList.__proto__),
      _get: dart.fnType(dart.legacy(T), [dart.legacy(core.int)]),
      [$_get]: dart.fnType(dart.legacy(T), [dart.legacy(core.int)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      cast: dart.gFnType(R => [dart.legacy(core.List$(dart.legacy(R))), []]),
      [$cast]: dart.gFnType(R => [dart.legacy(core.List$(dart.legacy(R))), []]),
      observe: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(dart.fnType(dart.void, [dart.legacy(observable_collections.ListChange$(dart.legacy(T)))]))], {fireImmediately: dart.legacy(core.bool)}, {}),
      [_notifyElementUpdate]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(T), dart.legacy(T)], {type: dart.legacy(core$.OperationType)}, {}),
      [_notifyElementsUpdate]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(observable_collections.ElementChange)))]),
      [_notifyRangeUpdate]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(T))), dart.legacy(core.List$(dart.legacy(T)))])
    }));
    dart.setGetterSignature(ObservableList, () => ({
      __proto__: dart.getGetters(ObservableList.__proto__),
      [_listeners]: dart.legacy(core$.Listeners$(dart.legacy(observable_collections.ListChange$(dart.legacy(T))))),
      name: dart.legacy(core.String),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setSetterSignature(ObservableList, () => ({
      __proto__: dart.getSetters(ObservableList.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(ObservableList, I[0]);
    dart.setFieldSignature(ObservableList, () => ({
      __proto__: dart.getFields(ObservableList.__proto__),
      [_context$]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
      [_atom$]: dart.finalFieldType(dart.legacy(core$.Atom)),
      [_list$]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T)))),
      [_listenersField]: dart.fieldType(dart.legacy(core$.Listeners$(dart.legacy(observable_collections.ListChange$(dart.legacy(T))))))
    }));
    dart.defineExtensionMethods(ObservableList, [
      '+',
      '_get',
      '_set',
      'add',
      'addAll',
      'lastIndexWhere',
      'lastWhere',
      'sublist',
      'asMap',
      'cast',
      'toList',
      'clear',
      'fillRange',
      'insert',
      'insertAll',
      'remove',
      'removeAt',
      'removeLast',
      'removeRange',
      'removeWhere',
      'replaceRange',
      'retainWhere',
      'setAll',
      'setRange',
      'shuffle',
      'sort'
    ]);
    dart.defineExtensionAccessors(ObservableList, ['length', 'iterator', 'single', 'first']);
    return ObservableList;
  });
  observable_collections.ObservableList = observable_collections.ObservableList$();
  dart.addTypeTests(observable_collections.ObservableList, _is_ObservableList_default);
  var index$ = dart.privateName(observable_collections, "ElementChange.index");
  var type$ = dart.privateName(observable_collections, "ElementChange.type");
  var newValue$ = dart.privateName(observable_collections, "ElementChange.newValue");
  var oldValue$ = dart.privateName(observable_collections, "ElementChange.oldValue");
  const _is_ElementChange_default = Symbol('_is_ElementChange_default');
  observable_collections.ElementChange$ = dart.generic(T => {
    class ElementChange extends core.Object {
      get index() {
        return this[index$];
      }
      set index(value) {
        super.index = value;
      }
      get type() {
        return this[type$];
      }
      set type(value) {
        super.type = value;
      }
      get newValue() {
        return this[newValue$];
      }
      set newValue(value) {
        super.newValue = value;
      }
      get oldValue() {
        return this[oldValue$];
      }
      set oldValue(value) {
        super.oldValue = value;
      }
    }
    (ElementChange.new = function(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
      this[index$] = index;
      this[type$] = type;
      this[newValue$] = newValue;
      this[oldValue$] = oldValue;
      if (!(index != null)) dart.assertFailed(null, I[1], 466, 16, "index != null");
      ;
    }).prototype = ElementChange.prototype;
    dart.addTypeTests(ElementChange);
    ElementChange.prototype[_is_ElementChange_default] = true;
    dart.addTypeCaches(ElementChange);
    dart.setLibraryUri(ElementChange, I[0]);
    dart.setFieldSignature(ElementChange, () => ({
      __proto__: dart.getFields(ElementChange.__proto__),
      index: dart.finalFieldType(dart.legacy(core.int)),
      type: dart.finalFieldType(dart.legacy(core$.OperationType)),
      newValue: dart.finalFieldType(dart.legacy(T)),
      oldValue: dart.finalFieldType(dart.legacy(T))
    }));
    return ElementChange;
  });
  observable_collections.ElementChange = observable_collections.ElementChange$();
  dart.addTypeTests(observable_collections.ElementChange, _is_ElementChange_default);
  var index$0 = dart.privateName(observable_collections, "RangeChange.index");
  var newValues$ = dart.privateName(observable_collections, "RangeChange.newValues");
  var oldValues$ = dart.privateName(observable_collections, "RangeChange.oldValues");
  const _is_RangeChange_default = Symbol('_is_RangeChange_default');
  observable_collections.RangeChange$ = dart.generic(T => {
    class RangeChange extends core.Object {
      get index() {
        return this[index$0];
      }
      set index(value) {
        super.index = value;
      }
      get newValues() {
        return this[newValues$];
      }
      set newValues(value) {
        super.newValues = value;
      }
      get oldValues() {
        return this[oldValues$];
      }
      set oldValues(value) {
        super.oldValues = value;
      }
    }
    (RangeChange.new = function(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      let newValues = opts && 'newValues' in opts ? opts.newValues : null;
      let oldValues = opts && 'oldValues' in opts ? opts.oldValues : null;
      this[index$0] = index;
      this[newValues$] = newValues;
      this[oldValues$] = oldValues;
      if (!(index != null)) dart.assertFailed(null, I[1], 486, 16, "index != null");
      ;
    }).prototype = RangeChange.prototype;
    dart.addTypeTests(RangeChange);
    RangeChange.prototype[_is_RangeChange_default] = true;
    dart.addTypeCaches(RangeChange);
    dart.setLibraryUri(RangeChange, I[0]);
    dart.setFieldSignature(RangeChange, () => ({
      __proto__: dart.getFields(RangeChange.__proto__),
      index: dart.finalFieldType(dart.legacy(core.int)),
      newValues: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T)))),
      oldValues: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T))))
    }));
    return RangeChange;
  });
  observable_collections.RangeChange = observable_collections.RangeChange$();
  dart.addTypeTests(observable_collections.RangeChange, _is_RangeChange_default);
  var list$ = dart.privateName(observable_collections, "ListChange.list");
  var elementChanges$ = dart.privateName(observable_collections, "ListChange.elementChanges");
  var rangeChanges$ = dart.privateName(observable_collections, "ListChange.rangeChanges");
  const _is_ListChange_default = Symbol('_is_ListChange_default');
  observable_collections.ListChange$ = dart.generic(T => {
    class ListChange extends core.Object {
      get list() {
        return this[list$];
      }
      set list(value) {
        super.list = value;
      }
      get elementChanges() {
        return this[elementChanges$];
      }
      set elementChanges(value) {
        super.elementChanges = value;
      }
      get rangeChanges() {
        return this[rangeChanges$];
      }
      set rangeChanges(value) {
        super.rangeChanges = value;
      }
    }
    (ListChange.new = function(opts) {
      let list = opts && 'list' in opts ? opts.list : null;
      let elementChanges = opts && 'elementChanges' in opts ? opts.elementChanges : null;
      let rangeChanges = opts && 'rangeChanges' in opts ? opts.rangeChanges : null;
      this[list$] = list;
      this[elementChanges$] = elementChanges;
      this[rangeChanges$] = rangeChanges;
      ;
    }).prototype = ListChange.prototype;
    dart.addTypeTests(ListChange);
    ListChange.prototype[_is_ListChange_default] = true;
    dart.addTypeCaches(ListChange);
    dart.setLibraryUri(ListChange, I[0]);
    dart.setFieldSignature(ListChange, () => ({
      __proto__: dart.getFields(ListChange.__proto__),
      list: dart.finalFieldType(dart.legacy(observable_collections.ObservableList$(dart.legacy(T)))),
      elementChanges: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(observable_collections.ElementChange)))),
      rangeChanges: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(observable_collections.RangeChange))))
    }));
    return ListChange;
  });
  observable_collections.ListChange = observable_collections.ListChange$();
  dart.addTypeTests(observable_collections.ListChange, _is_ListChange_default);
  var _map$ = dart.privateName(observable_collections, "_map");
  var _hasListeners = dart.privateName(observable_collections, "_hasListeners");
  var _reportUpdate = dart.privateName(observable_collections, "_reportUpdate");
  var _reportAdd = dart.privateName(observable_collections, "_reportAdd");
  var _reportRemove = dart.privateName(observable_collections, "_reportRemove");
  const _is_ObservableMap_default = Symbol('_is_ObservableMap_default');
  observable_collections.ObservableMap$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var LinkedMapOfKL$VL = () => (LinkedMapOfKL$VL = dart.constFn(_js_helper.LinkedMap$(KL(), VL())))();
    var LinkedHashMapOfKL$VL = () => (LinkedHashMapOfKL$VL = dart.constFn(collection.LinkedHashMap$(KL(), VL())))();
    var SplayTreeMapOfKL$VL = () => (SplayTreeMapOfKL$VL = dart.constFn(collection.SplayTreeMap$(KL(), VL())))();
    var MapChangeOfKL$VL = () => (MapChangeOfKL$VL = dart.constFn(observable_collections.MapChange$(KL(), VL())))();
    var MapChangeLOfKL$VL = () => (MapChangeLOfKL$VL = dart.constFn(dart.legacy(MapChangeOfKL$VL())))();
    var ListenersOfMapChangeLOfKL$VL = () => (ListenersOfMapChangeLOfKL$VL = dart.constFn(core$.Listeners$(MapChangeLOfKL$VL())))();
    var MapKeysIterableOfKL = () => (MapKeysIterableOfKL = dart.constFn(observable_collections.MapKeysIterable$(KL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    const Object_MapMixin$36 = class Object_MapMixin extends core.Object {};
    (Object_MapMixin$36.new = function() {
    }).prototype = Object_MapMixin$36.prototype;
    dart.applyMixin(Object_MapMixin$36, collection.MapMixin$(dart.legacy(K), dart.legacy(V)));
    class ObservableMap extends Object_MapMixin$36 {
      get name() {
        return this[_atom$].name;
      }
      get [_listeners]() {
        let t14;
        t14 = this[_listenersField];
        return t14 == null ? this[_listenersField] = new (ListenersOfMapChangeLOfKL$VL()).new(this[_context$]) : t14;
      }
      get [_hasListeners]() {
        return this[_listenersField] != null && dart.test(this[_listenersField].hasHandlers);
      }
      _get(key) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$_get](key);
      }
      _set(key, value$) {
        let value = value$;
        KL().as(key);
        VL().as(value);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let oldValue = this[_map$][$_get](key);
          let type = "set";
          if (dart.test(this[_hasListeners])) {
            if (dart.test(this[_map$][$containsKey](key))) {
              type = "update";
            } else {
              type = "add";
            }
          }
          if (!dart.test(this[_map$][$containsKey](key)) || !dart.equals(value, oldValue)) {
            this[_map$][$_set](key, value);
            if (type === "update") {
              this[_reportUpdate](key, value, oldValue);
            } else if (type === "add") {
              this[_reportAdd](key, value);
            }
            this[_atom$].reportChanged();
          }
        }, T$.VoidToNull()), this[_atom$]);
        return value$;
      }
      clear() {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this.isEmpty)) {
            return;
          }
          if (dart.test(this[_hasListeners])) {
            let removed = LinkedHashMapOfKL$VL().from(this[_map$]);
            this[_map$][$clear]();
            removed[$forEach](dart.bind(this, _reportRemove));
          } else {
            this[_map$][$clear]();
          }
          this[_atom$].reportChanged();
        }, T$.VoidToNull()), this[_atom$]);
      }
      get keys() {
        return new (MapKeysIterableOfKL()).new(this[_map$][$keys], this[_atom$]);
      }
      cast(RK, RV) {
        return new (observable_collections.ObservableMap$(dart.legacy(RK), dart.legacy(RV)))._wrap(this[_context$], super.cast(dart.legacy(RK), dart.legacy(RV)), this[_atom$]);
      }
      remove(key) {
        let value = null;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_hasListeners])) {
            if (dart.test(this[_map$][$containsKey](key))) {
              value = this[_map$][$remove](key);
              this[_reportRemove](KL().as(key), value);
              this[_atom$].reportChanged();
              return;
            }
            value = null;
          }
          value = this[_map$][$remove](key);
          this[_atom$].reportChanged();
        }, T$.VoidToNull()), this[_atom$]);
        return value;
      }
      get length() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$length];
      }
      get isNotEmpty() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$isNotEmpty];
      }
      get isEmpty() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$isEmpty];
      }
      containsKey(key) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$containsKey](key);
      }
      [_reportUpdate](key, newValue, oldValue) {
        this[_listeners].notifyListeners(new (MapChangeOfKL$VL()).new({type: core$.OperationType.update, key: key, newValue: newValue, oldValue: oldValue, object: this}));
      }
      [_reportAdd](key, newValue) {
        KL().as(key);
        VL().as(newValue);
        this[_listeners].notifyListeners(new (MapChangeOfKL$VL()).new({type: core$.OperationType.add, key: key, newValue: newValue, object: this}));
      }
      [_reportRemove](key, oldValue) {
        KL().as(key);
        VL().as(oldValue);
        this[_listeners].notifyListeners(new (MapChangeOfKL$VL()).new({type: core$.OperationType.remove, key: key, oldValue: oldValue, object: this}));
      }
      observe(listener, opts) {
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
        let dispose = this[_listeners].add(listener);
        if (fireImmediately === true) {
          this[_map$][$forEach](dart.bind(this, _reportAdd));
        }
        return dispose;
      }
    }
    (ObservableMap.new = function(opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t14 = context, t14 == null ? context$.mainContext : t14);
      this[_atom$] = observable_collections._observableMapAtom(KL(), VL(), context, name);
      this[_map$] = new (LinkedMapOfKL$VL()).new();
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap.of = function(other, opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t14 = context, t14 == null ? context$.mainContext : t14);
      this[_atom$] = observable_collections._observableMapAtom(KL(), VL(), context, name);
      this[_map$] = LinkedHashMapOfKL$VL().of(other);
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap.linkedHashMapFrom = function(other, opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t14 = context, t14 == null ? context$.mainContext : t14);
      this[_atom$] = observable_collections._observableMapAtom(KL(), VL(), context, name);
      this[_map$] = LinkedHashMapOfKL$VL().from(other);
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap.splayTreeMapFrom = function(other, opts) {
      let t14;
      let compare = opts && 'compare' in opts ? opts.compare : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t14 = context, t14 == null ? context$.mainContext : t14);
      this[_atom$] = observable_collections._observableMapAtom(KL(), VL(), context, name);
      this[_map$] = SplayTreeMapOfKL$VL().from(other, compare, isValidKey);
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap._wrap = function(_context, _map, _atom) {
      this[_listenersField] = null;
      this[_context$] = _context;
      this[_map$] = _map;
      this[_atom$] = _atom;
      ;
    }).prototype = ObservableMap.prototype;
    dart.addTypeTests(ObservableMap);
    ObservableMap.prototype[_is_ObservableMap_default] = true;
    dart.addTypeCaches(ObservableMap);
    ObservableMap[dart.implements] = () => [core$.Listenable$(dart.legacy(observable_collections.MapChange$(dart.legacy(K), dart.legacy(V))))];
    dart.setMethodSignature(ObservableMap, () => ({
      __proto__: dart.getMethods(ObservableMap.__proto__),
      _get: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$_get]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      cast: dart.gFnType((RK, RV) => [dart.legacy(core.Map$(dart.legacy(RK), dart.legacy(RV))), []]),
      [$cast]: dart.gFnType((RK, RV) => [dart.legacy(core.Map$(dart.legacy(RK), dart.legacy(RV))), []]),
      remove: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [_reportUpdate]: dart.fnType(dart.void, [dart.legacy(K), dart.legacy(V), dart.legacy(V)]),
      [_reportAdd]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [_reportRemove]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      observe: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(dart.fnType(dart.void, [dart.legacy(observable_collections.MapChange$(dart.legacy(K), dart.legacy(V)))]))], {fireImmediately: dart.legacy(core.bool)}, {})
    }));
    dart.setGetterSignature(ObservableMap, () => ({
      __proto__: dart.getGetters(ObservableMap.__proto__),
      name: dart.legacy(core.String),
      [_listeners]: dart.legacy(core$.Listeners$(dart.legacy(observable_collections.MapChange$(dart.legacy(K), dart.legacy(V))))),
      [_hasListeners]: dart.legacy(core.bool),
      keys: dart.legacy(core.Iterable$(dart.legacy(K))),
      [$keys]: dart.legacy(core.Iterable$(dart.legacy(K)))
    }));
    dart.setLibraryUri(ObservableMap, I[0]);
    dart.setFieldSignature(ObservableMap, () => ({
      __proto__: dart.getFields(ObservableMap.__proto__),
      [_context$]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
      [_atom$]: dart.finalFieldType(dart.legacy(core$.Atom)),
      [_map$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V)))),
      [_listenersField]: dart.fieldType(dart.legacy(core$.Listeners$(dart.legacy(observable_collections.MapChange$(dart.legacy(K), dart.legacy(V))))))
    }));
    dart.defineExtensionMethods(ObservableMap, [
      '_get',
      '_set',
      'clear',
      'cast',
      'remove',
      'containsKey'
    ]);
    dart.defineExtensionAccessors(ObservableMap, ['keys', 'length', 'isNotEmpty', 'isEmpty']);
    return ObservableMap;
  });
  observable_collections.ObservableMap = observable_collections.ObservableMap$();
  dart.addTypeTests(observable_collections.ObservableMap, _is_ObservableMap_default);
  var type$0 = dart.privateName(observable_collections, "MapChange.type");
  var key$ = dart.privateName(observable_collections, "MapChange.key");
  var newValue$0 = dart.privateName(observable_collections, "MapChange.newValue");
  var oldValue$0 = dart.privateName(observable_collections, "MapChange.oldValue");
  var object$ = dart.privateName(observable_collections, "MapChange.object");
  const _is_MapChange_default = Symbol('_is_MapChange_default');
  observable_collections.MapChange$ = dart.generic((K, V) => {
    class MapChange extends core.Object {
      get type() {
        return this[type$0];
      }
      set type(value) {
        super.type = value;
      }
      get key() {
        return this[key$];
      }
      set key(value) {
        super.key = value;
      }
      get newValue() {
        return this[newValue$0];
      }
      set newValue(value) {
        super.newValue = value;
      }
      get oldValue() {
        return this[oldValue$0];
      }
      set oldValue(value) {
        super.oldValue = value;
      }
      get object() {
        return this[object$];
      }
      set object(value) {
        super.object = value;
      }
    }
    (MapChange.new = function(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
      let object = opts && 'object' in opts ? opts.object : null;
      this[type$0] = type;
      this[key$] = key;
      this[newValue$0] = newValue;
      this[oldValue$0] = oldValue;
      this[object$] = object;
      ;
    }).prototype = MapChange.prototype;
    dart.addTypeTests(MapChange);
    MapChange.prototype[_is_MapChange_default] = true;
    dart.addTypeCaches(MapChange);
    dart.setLibraryUri(MapChange, I[0]);
    dart.setFieldSignature(MapChange, () => ({
      __proto__: dart.getFields(MapChange.__proto__),
      type: dart.finalFieldType(dart.legacy(core$.OperationType)),
      key: dart.finalFieldType(dart.legacy(K)),
      newValue: dart.finalFieldType(dart.legacy(V)),
      oldValue: dart.finalFieldType(dart.legacy(V)),
      object: dart.finalFieldType(dart.legacy(observable_collections.ObservableMap$(dart.legacy(K), dart.legacy(V))))
    }));
    return MapChange;
  });
  observable_collections.MapChange = observable_collections.MapChange$();
  dart.addTypeTests(observable_collections.MapChange, _is_MapChange_default);
  var _iterable$ = dart.privateName(observable_collections, "_iterable");
  const _is_MapKeysIterable_default = Symbol('_is_MapKeysIterable_default');
  observable_collections.MapKeysIterable$ = dart.generic(K => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var MapKeysIteratorOfKL = () => (MapKeysIteratorOfKL = dart.constFn(observable_collections.MapKeysIterator$(KL())))();
    const Object_IterableMixin$36 = class Object_IterableMixin extends core.Object {};
    (Object_IterableMixin$36.new = function() {
    }).prototype = Object_IterableMixin$36.prototype;
    dart.applyMixin(Object_IterableMixin$36, collection.IterableMixin$(dart.legacy(K)));
    class MapKeysIterable extends Object_IterableMixin$36 {
      get length() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterable$][$length];
      }
      contains(element) {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterable$][$contains](element);
      }
      get iterator() {
        return new (MapKeysIteratorOfKL()).new(this[_iterable$][$iterator], this[_atom$]);
      }
    }
    (MapKeysIterable.new = function(_iterable, _atom) {
      this[_iterable$] = _iterable;
      this[_atom$] = _atom;
      ;
    }).prototype = MapKeysIterable.prototype;
    dart.addTypeTests(MapKeysIterable);
    MapKeysIterable.prototype[_is_MapKeysIterable_default] = true;
    dart.addTypeCaches(MapKeysIterable);
    dart.setGetterSignature(MapKeysIterable, () => ({
      __proto__: dart.getGetters(MapKeysIterable.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(K))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(K)))
    }));
    dart.setLibraryUri(MapKeysIterable, I[0]);
    dart.setFieldSignature(MapKeysIterable, () => ({
      __proto__: dart.getFields(MapKeysIterable.__proto__),
      [_iterable$]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(K)))),
      [_atom$]: dart.finalFieldType(dart.legacy(core$.Atom))
    }));
    dart.defineExtensionMethods(MapKeysIterable, ['contains']);
    dart.defineExtensionAccessors(MapKeysIterable, ['length', 'iterator']);
    return MapKeysIterable;
  });
  observable_collections.MapKeysIterable = observable_collections.MapKeysIterable$();
  dart.addTypeTests(observable_collections.MapKeysIterable, _is_MapKeysIterable_default);
  var _iterator$ = dart.privateName(observable_collections, "_iterator");
  const _is_MapKeysIterator_default = Symbol('_is_MapKeysIterator_default');
  observable_collections.MapKeysIterator$ = dart.generic(K => {
    class MapKeysIterator extends core.Object {
      get current() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].current;
      }
      moveNext() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].moveNext();
      }
    }
    (MapKeysIterator.new = function(_iterator, _atom) {
      this[_iterator$] = _iterator;
      this[_atom$] = _atom;
      ;
    }).prototype = MapKeysIterator.prototype;
    dart.addTypeTests(MapKeysIterator);
    MapKeysIterator.prototype[_is_MapKeysIterator_default] = true;
    dart.addTypeCaches(MapKeysIterator);
    MapKeysIterator[dart.implements] = () => [core.Iterator$(dart.legacy(K))];
    dart.setMethodSignature(MapKeysIterator, () => ({
      __proto__: dart.getMethods(MapKeysIterator.__proto__),
      moveNext: dart.fnType(dart.legacy(core.bool), [])
    }));
    dart.setGetterSignature(MapKeysIterator, () => ({
      __proto__: dart.getGetters(MapKeysIterator.__proto__),
      current: dart.legacy(K)
    }));
    dart.setLibraryUri(MapKeysIterator, I[0]);
    dart.setFieldSignature(MapKeysIterator, () => ({
      __proto__: dart.getFields(MapKeysIterator.__proto__),
      [_iterator$]: dart.finalFieldType(dart.legacy(core.Iterator$(dart.legacy(K)))),
      [_atom$]: dart.finalFieldType(dart.legacy(core$.Atom))
    }));
    return MapKeysIterator;
  });
  observable_collections.MapKeysIterator = observable_collections.MapKeysIterator$();
  dart.addTypeTests(observable_collections.MapKeysIterator, _is_MapKeysIterator_default);
  var _set$ = dart.privateName(observable_collections, "_set");
  const _is_ObservableSet_default = Symbol('_is_ObservableSet_default');
  observable_collections.ObservableSet$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _HashSetOfTL = () => (_HashSetOfTL = dart.constFn(collection._HashSet$(TL())))();
    var HashSetOfTL = () => (HashSetOfTL = dart.constFn(collection.HashSet$(TL())))();
    var LinkedHashSetOfTL = () => (LinkedHashSetOfTL = dart.constFn(collection.LinkedHashSet$(TL())))();
    var SplayTreeSetOfTL = () => (SplayTreeSetOfTL = dart.constFn(collection.SplayTreeSet$(TL())))();
    var SetChangeOfTL = () => (SetChangeOfTL = dart.constFn(observable_collections.SetChange$(TL())))();
    var SetChangeLOfTL = () => (SetChangeLOfTL = dart.constFn(dart.legacy(SetChangeOfTL())))();
    var ListenersOfSetChangeLOfTL = () => (ListenersOfSetChangeLOfTL = dart.constFn(core$.Listeners$(SetChangeLOfTL())))();
    var ObservableIteratorOfTL = () => (ObservableIteratorOfTL = dart.constFn(observable_collections.ObservableIterator$(TL())))();
    const Object_SetMixin$36 = class Object_SetMixin extends core.Object {};
    (Object_SetMixin$36.new = function() {
    }).prototype = Object_SetMixin$36.prototype;
    dart.applyMixin(Object_SetMixin$36, collection.SetMixin$(dart.legacy(T)));
    class ObservableSet extends Object_SetMixin$36 {
      get name() {
        return this[_atom$].name;
      }
      get [_listeners]() {
        let t14;
        t14 = this[_listenersField];
        return t14 == null ? this[_listenersField] = new (ListenersOfSetChangeLOfTL()).new(this[_context$]) : t14;
      }
      get [_hasListeners]() {
        return this[_listenersField] != null && dart.test(this[_listenersField].hasHandlers);
      }
      add(value) {
        TL().as(value);
        let result = false;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          result = this[_set$].add(value);
          if (dart.test(result) && dart.test(this[_hasListeners])) {
            this[_reportAdd](value);
          }
          if (dart.test(result)) {
            this[_atom$].reportChanged();
          }
        }, T$.VoidToNull()), this[_atom$]);
        return result;
      }
      contains(element) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_set$].contains(element);
      }
      get iterator() {
        return new (ObservableIteratorOfTL()).new(this[_atom$], this[_set$].iterator);
      }
      get length() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_set$][$length];
      }
      lookup(element) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_set$].lookup(element);
      }
      remove(value) {
        let removed = false;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          removed = this[_set$].remove(value);
          if (dart.test(removed) && dart.test(this[_hasListeners])) {
            this[_reportRemove](TL().as(value));
          }
          if (dart.test(removed)) {
            this[_atom$].reportChanged();
          }
        }, T$.VoidToNull()), this[_atom$]);
        return removed;
      }
      clear() {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_hasListeners])) {
            let items = this[_set$][$toList]({growable: false});
            this[_set$].clear();
            items[$forEach](dart.bind(this, _reportRemove));
          } else {
            this[_set$].clear();
          }
          this[_atom$].reportChanged();
        }, T$.VoidToNull()), this[_atom$]);
      }
      cast(R) {
        return new (observable_collections.ObservableSet$(dart.legacy(R)))._wrap(this[_context$], this[_atom$], this[_set$].cast(dart.legacy(R)));
      }
      toSet() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return LinkedHashSetOfTL().from(this[_set$]);
      }
      observe(listener, opts) {
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
        let dispose = this[_listeners].add(listener);
        if (fireImmediately === true) {
          this[_set$][$forEach](dart.bind(this, _reportAdd));
        }
        return dispose;
      }
      [_reportAdd](value) {
        TL().as(value);
        this[_listeners].notifyListeners(new (SetChangeOfTL()).new({object: this, type: core$.OperationType.add, value: value}));
      }
      [_reportRemove](value) {
        TL().as(value);
        this[_listeners].notifyListeners(new (SetChangeOfTL()).new({object: this, type: core$.OperationType.remove, value: value}));
      }
    }
    (ObservableSet.new = function(opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), new (_HashSetOfTL()).new(), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet.of = function(other, opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), HashSetOfTL().of(other), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet.linkedHashSetFrom = function(other, opts) {
      let t14, t14$;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), (t14$ = LinkedHashSetOfTL().new({equals: equals, hashCode: hashCode, isValidKey: isValidKey}), (() => {
        t14$.addAll(other);
        return t14$;
      })()), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet.splayTreeSetFrom = function(other, opts) {
      let t14;
      let compare = opts && 'compare' in opts ? opts.compare : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), SplayTreeSetOfTL().of(other, compare, isValidKey), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet._wrap = function(_context, _atom, _set) {
      this[_listenersField] = null;
      this[_context$] = _context;
      this[_atom$] = _atom;
      this[_set$] = _set;
      ;
    }).prototype = ObservableSet.prototype;
    (ObservableSet.__ = function(_context, wrapped, name) {
      this[_listenersField] = null;
      this[_context$] = _context;
      this[_atom$] = observable_collections._observableSetAtom(dart.dynamic, _context, name);
      this[_set$] = wrapped;
      ;
    }).prototype = ObservableSet.prototype;
    dart.addTypeTests(ObservableSet);
    ObservableSet.prototype[_is_ObservableSet_default] = true;
    dart.addTypeCaches(ObservableSet);
    ObservableSet[dart.implements] = () => [core$.Listenable$(dart.legacy(observable_collections.SetChange$(dart.legacy(T))))];
    dart.setMethodSignature(ObservableSet, () => ({
      __proto__: dart.getMethods(ObservableSet.__proto__),
      add: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$contains]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      lookup: dart.fnType(dart.legacy(T), [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      cast: dart.gFnType(R => [dart.legacy(core.Set$(dart.legacy(R))), []]),
      [$cast]: dart.gFnType(R => [dart.legacy(core.Set$(dart.legacy(R))), []]),
      toSet: dart.fnType(dart.legacy(core.Set$(dart.legacy(T))), []),
      [$toSet]: dart.fnType(dart.legacy(core.Set$(dart.legacy(T))), []),
      observe: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(dart.fnType(dart.void, [dart.legacy(observable_collections.SetChange$(dart.legacy(T)))]))], {fireImmediately: dart.legacy(core.bool)}, {}),
      [_reportAdd]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_reportRemove]: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(ObservableSet, () => ({
      __proto__: dart.getGetters(ObservableSet.__proto__),
      name: dart.legacy(core.String),
      [_listeners]: dart.legacy(core$.Listeners$(dart.legacy(observable_collections.SetChange$(dart.legacy(T))))),
      [_hasListeners]: dart.legacy(core.bool),
      iterator: dart.legacy(core.Iterator$(dart.legacy(T))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(T))),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(ObservableSet, I[0]);
    dart.setFieldSignature(ObservableSet, () => ({
      __proto__: dart.getFields(ObservableSet.__proto__),
      [_context$]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
      [_atom$]: dart.finalFieldType(dart.legacy(core$.Atom)),
      [_set$]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(T)))),
      [_listenersField]: dart.fieldType(dart.legacy(core$.Listeners$(dart.legacy(observable_collections.SetChange$(dart.legacy(T))))))
    }));
    dart.defineExtensionMethods(ObservableSet, ['contains', 'cast', 'toSet']);
    dart.defineExtensionAccessors(ObservableSet, ['iterator', 'length']);
    return ObservableSet;
  });
  observable_collections.ObservableSet = observable_collections.ObservableSet$();
  dart.addTypeTests(observable_collections.ObservableSet, _is_ObservableSet_default);
  const _is_ObservableIterator_default = Symbol('_is_ObservableIterator_default');
  observable_collections.ObservableIterator$ = dart.generic(T => {
    class ObservableIterator extends core.Object {
      get current() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].current;
      }
      moveNext() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].moveNext();
      }
    }
    (ObservableIterator.new = function(_atom, _iterator) {
      this[_atom$] = _atom;
      this[_iterator$] = _iterator;
      ;
    }).prototype = ObservableIterator.prototype;
    dart.addTypeTests(ObservableIterator);
    ObservableIterator.prototype[_is_ObservableIterator_default] = true;
    dart.addTypeCaches(ObservableIterator);
    ObservableIterator[dart.implements] = () => [core.Iterator$(dart.legacy(T))];
    dart.setMethodSignature(ObservableIterator, () => ({
      __proto__: dart.getMethods(ObservableIterator.__proto__),
      moveNext: dart.fnType(dart.legacy(core.bool), [])
    }));
    dart.setGetterSignature(ObservableIterator, () => ({
      __proto__: dart.getGetters(ObservableIterator.__proto__),
      current: dart.legacy(T)
    }));
    dart.setLibraryUri(ObservableIterator, I[0]);
    dart.setFieldSignature(ObservableIterator, () => ({
      __proto__: dart.getFields(ObservableIterator.__proto__),
      [_iterator$]: dart.finalFieldType(dart.legacy(core.Iterator$(dart.legacy(T)))),
      [_atom$]: dart.finalFieldType(dart.legacy(core$.Atom))
    }));
    return ObservableIterator;
  });
  observable_collections.ObservableIterator = observable_collections.ObservableIterator$();
  dart.addTypeTests(observable_collections.ObservableIterator, _is_ObservableIterator_default);
  var object$0 = dart.privateName(observable_collections, "SetChange.object");
  var type$1 = dart.privateName(observable_collections, "SetChange.type");
  var value$ = dart.privateName(observable_collections, "SetChange.value");
  const _is_SetChange_default = Symbol('_is_SetChange_default');
  observable_collections.SetChange$ = dart.generic(T => {
    class SetChange extends core.Object {
      get object() {
        return this[object$0];
      }
      set object(value) {
        super.object = value;
      }
      get type() {
        return this[type$1];
      }
      set type(value) {
        super.type = value;
      }
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
    }
    (SetChange.new = function(opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let value = opts && 'value' in opts ? opts.value : null;
      this[object$0] = object;
      this[type$1] = type;
      this[value$] = value;
      if (!(object != null)) dart.assertFailed(null, I[2], 235, 16, "object != null");
      if (!(type != null)) dart.assertFailed(null, I[2], 236, 16, "type != null");
      ;
    }).prototype = SetChange.prototype;
    dart.addTypeTests(SetChange);
    SetChange.prototype[_is_SetChange_default] = true;
    dart.addTypeCaches(SetChange);
    dart.setLibraryUri(SetChange, I[0]);
    dart.setFieldSignature(SetChange, () => ({
      __proto__: dart.getFields(SetChange.__proto__),
      object: dart.finalFieldType(dart.legacy(observable_collections.ObservableSet$(dart.legacy(T)))),
      type: dart.finalFieldType(dart.legacy(core$.OperationType)),
      value: dart.finalFieldType(dart.legacy(T))
    }));
    return SetChange;
  });
  observable_collections.SetChange = observable_collections.SetChange$();
  dart.addTypeTests(observable_collections.SetChange, _is_SetChange_default);
  observable_collections._observableListAtom = function _observableListAtom(T, context, name) {
    let t14, t14$;
    let ctx = (t14 = context, t14 == null ? context$.mainContext : t14);
    return core$.Atom.new({name: (t14$ = name, t14$ == null ? ctx.nameFor("ObservableList<" + dart.str(dart.wrapType(dart.legacy(T))) + ">") : t14$), context: ctx});
  };
  observable_collections.wrapInObservableList = function wrapInObservableList(T, atom, list) {
    return new (observable_collections.ObservableList$(dart.legacy(T)))._wrap(context$.mainContext, atom, list);
  };
  observable_collections._observableMapAtom = function _observableMapAtom(K, V, context, name) {
    let t14, t14$;
    let ctx = (t14 = context, t14 == null ? context$.mainContext : t14);
    return core$.Atom.new({name: (t14$ = name, t14$ == null ? ctx.nameFor("ObservableMap<" + dart.str(dart.wrapType(dart.legacy(K))) + ", " + dart.str(dart.wrapType(dart.legacy(V))) + ">") : t14$), context: ctx});
  };
  observable_collections.wrapInObservableMap = function wrapInObservableMap(K, V, atom, map) {
    return new (observable_collections.ObservableMap$(dart.legacy(K), dart.legacy(V)))._wrap(context$.mainContext, map, atom);
  };
  observable_collections._observableSetAtom = function _observableSetAtom(T, context, name) {
    let t14;
    return core$.Atom.new({name: (t14 = name, t14 == null ? context.nameFor("ObservableSet<" + dart.str(dart.wrapType(dart.legacy(T))) + ">") : t14), context: context});
  };
  observable_collections.wrapInObservableSet = function wrapInObservableSet(T, atom, _set) {
    return new (observable_collections.ObservableSet$(dart.legacy(T)))._wrap(context$.mainContext, atom, _set);
  };
  var _zoneField = dart.privateName(async$, "_zoneField");
  var _actions = dart.privateName(async$, "_actions");
  var _run = dart.privateName(async$, "_run");
  var _runUnary = dart.privateName(async$, "_runUnary");
  var _zone = dart.privateName(async$, "_zone");
  async$.AsyncAction = class AsyncAction extends core.Object {
    get [_zone]() {
      if (this[_zoneField] == null) {
        let spec = new async._ZoneSpecification.new({run: dart.bind(this, _run), runUnary: dart.bind(this, _runUnary)});
        this[_zoneField] = async.Zone.current.fork({specification: spec});
      }
      return this[_zoneField];
    }
    run(R, body) {
      return async.async(dart.legacy(R), (function* run() {
        try {
          return yield this[_zone].run(dart.legacy(async.FutureOr$(dart.legacy(R))), body);
        } finally {
          yield async.Future.microtask(C[1] || CT.C1);
        }
      }).bind(this));
    }
    static _noOp() {
      return null;
    }
    [_run](R, self, parent, zone, f) {
      let actionInfo = this[_actions].startAction({name: dart.str(this[_actions].name) + "(Zone.run)"});
      try {
        let result = parent.run(dart.legacy(R), zone, f);
        return result;
      } finally {
        this[_actions].endAction(actionInfo);
      }
    }
    [_runUnary](R, A, self, parent, zone, f, a) {
      let actionInfo = this[_actions].startAction({name: dart.str(this[_actions].name) + "(Zone.runUnary)"});
      try {
        let result = parent.runUnary(dart.legacy(R), dart.legacy(A), zone, f, a);
        return result;
      } finally {
        this[_actions].endAction(actionInfo);
      }
    }
  };
  (async$.AsyncAction.new = function(name, opts) {
    let t14;
    let context = opts && 'context' in opts ? opts.context : null;
    async$.AsyncAction.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), name);
  }).prototype = async$.AsyncAction.prototype;
  (async$.AsyncAction.__ = function(context, name) {
    this[_zoneField] = null;
    if (!(name != null)) dart.assertFailed(null, I[3], 13, 16, "name != null");
    this[_actions] = new core$.ActionController.new({context: context, name: name});
    ;
  }).prototype = async$.AsyncAction.prototype;
  dart.addTypeTests(async$.AsyncAction);
  dart.addTypeCaches(async$.AsyncAction);
  dart.setMethodSignature(async$.AsyncAction, () => ({
    __proto__: dart.getMethods(async$.AsyncAction.__proto__),
    run: dart.gFnType(R => [dart.legacy(async.Future$(dart.legacy(R))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(R))), []))]]),
    [_run]: dart.gFnType(R => [dart.legacy(R), [dart.legacy(async.Zone), dart.legacy(async.ZoneDelegate), dart.legacy(async.Zone), dart.legacy(dart.fnType(dart.legacy(R), []))]]),
    [_runUnary]: dart.gFnType((R, A) => [dart.legacy(R), [dart.legacy(async.Zone), dart.legacy(async.ZoneDelegate), dart.legacy(async.Zone), dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(A)])), dart.legacy(A)]])
  }));
  dart.setGetterSignature(async$.AsyncAction, () => ({
    __proto__: dart.getGetters(async$.AsyncAction.__proto__),
    [_zone]: dart.legacy(async.Zone)
  }));
  dart.setLibraryUri(async$.AsyncAction, I[4]);
  dart.setFieldSignature(async$.AsyncAction, () => ({
    __proto__: dart.getFields(async$.AsyncAction.__proto__),
    [_actions]: dart.finalFieldType(dart.legacy(core$.ActionController)),
    [_zoneField]: dart.fieldType(dart.legacy(async.Zone))
  }));
  var _name$0 = dart.privateName(async$, "_name");
  async$.FutureStatus = class FutureStatus extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (async$.FutureStatus.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = async$.FutureStatus.prototype;
  dart.addTypeTests(async$.FutureStatus);
  dart.addTypeCaches(async$.FutureStatus);
  dart.setMethodSignature(async$.FutureStatus, () => ({
    __proto__: dart.getMethods(async$.FutureStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(async$.FutureStatus, I[4]);
  dart.setFieldSignature(async$.FutureStatus, () => ({
    __proto__: dart.getFields(async$.FutureStatus.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(async$.FutureStatus, ['toString']);
  async$.FutureStatus.pending = C[2] || CT.C2;
  async$.FutureStatus.rejected = C[3] || CT.C3;
  async$.FutureStatus.fulfilled = C[4] || CT.C4;
  async$.FutureStatus.values = C[5] || CT.C5;
  var _axnController = dart.privateName(async$, "_axnController");
  var _status = dart.privateName(async$, "_status");
  var _result = dart.privateName(async$, "_result");
  var _fulfill = dart.privateName(async$, "_fulfill");
  var _reject = dart.privateName(async$, "_reject");
  const _is_FutureResult_default = Symbol('_is_FutureResult_default');
  async$.FutureResult$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class FutureResult extends core.Object {
      get status() {
        return this[_status].value;
      }
      get result() {
        return this[_result].value;
      }
      [_fulfill](value) {
        TL().as(value);
        let prevDerivation = this[_axnController].startAction();
        try {
          this[_status].value = async$.FutureStatus.fulfilled;
          this[_result].value = value;
        } finally {
          this[_axnController].endAction(prevDerivation);
        }
      }
      [_reject](error) {
        let prevDerivation = this[_axnController].startAction();
        try {
          this[_status].value = async$.FutureStatus.rejected;
          this[_result].value = error;
        } finally {
          this[_axnController].endAction(prevDerivation);
        }
      }
    }
    (FutureResult.new = function(context, _future, initialResult, initialStatus, name) {
      this[_axnController] = new core$.ActionController.new({context: context, name: dart.str(name) + ".ActionController"});
      this[_status] = T$.ObservableOfFutureStatusL().new(initialStatus, {name: dart.str(name) + ".status"});
      this[_result] = core$.Observable.new(initialResult, {name: dart.str(name) + ".result"});
      _future.then(dart.void, dart.bind(this, _fulfill), {onError: dart.bind(this, _reject)});
    }).prototype = FutureResult.prototype;
    dart.addTypeTests(FutureResult);
    FutureResult.prototype[_is_FutureResult_default] = true;
    dart.addTypeCaches(FutureResult);
    dart.setMethodSignature(FutureResult, () => ({
      __proto__: dart.getMethods(FutureResult.__proto__),
      [_fulfill]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_reject]: dart.fnType(dart.void, [dart.dynamic])
    }));
    dart.setGetterSignature(FutureResult, () => ({
      __proto__: dart.getGetters(FutureResult.__proto__),
      status: dart.legacy(async$.FutureStatus),
      result: dart.dynamic
    }));
    dart.setLibraryUri(FutureResult, I[4]);
    dart.setFieldSignature(FutureResult, () => ({
      __proto__: dart.getFields(FutureResult.__proto__),
      [_axnController]: dart.finalFieldType(dart.legacy(core$.ActionController)),
      [_status]: dart.finalFieldType(dart.legacy(core$.Observable$(dart.legacy(async$.FutureStatus)))),
      [_result]: dart.finalFieldType(dart.legacy(core$.Observable))
    }));
    return FutureResult;
  });
  async$.FutureResult = async$.FutureResult$();
  dart.addTypeTests(async$.FutureResult, _is_FutureResult_default);
  var _context$0 = dart.privateName(async$, "_context");
  var _future$ = dart.privateName(async$, "_future");
  var _initialStatus$ = dart.privateName(async$, "_initialStatus");
  var _initialResult$ = dart.privateName(async$, "_initialResult");
  const _is_ObservableFuture_default = Symbol('_is_ObservableFuture_default');
  async$.ObservableFuture$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureResultOfTL = () => (FutureResultOfTL = dart.constFn(async$.FutureResult$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var ObservableFutureOfTL = () => (ObservableFutureOfTL = dart.constFn(async$.ObservableFuture$(TL())))();
    var ObservableStreamOfTL = () => (ObservableStreamOfTL = dart.constFn(async$.ObservableStream$(TL())))();
    var FutureOrOfTL = () => (FutureOrOfTL = dart.constFn(async.FutureOr$(TL())))();
    var FutureOrLOfTL = () => (FutureOrLOfTL = dart.constFn(dart.legacy(FutureOrOfTL())))();
    var VoidToFutureOrLOfTL = () => (VoidToFutureOrLOfTL = dart.constFn(dart.fnType(FutureOrLOfTL(), [])))();
    var VoidToLFutureOrLOfTL = () => (VoidToLFutureOrLOfTL = dart.constFn(dart.legacy(VoidToFutureOrLOfTL())))();
    class ObservableFuture extends core.Object {
      get name() {
        return this[_name$0];
      }
      get status() {
        return this[_result].status;
      }
      get value() {
        return TL().as(this.status == async$.FutureStatus.fulfilled ? this[_result].result : null);
      }
      get error() {
        return this.status == async$.FutureStatus.rejected ? this[_result].result : null;
      }
      get result() {
        return this[_result].result;
      }
      match(R, opts) {
        let fulfilled = opts && 'fulfilled' in opts ? opts.fulfilled : null;
        let rejected = opts && 'rejected' in opts ? opts.rejected : null;
        let pending = opts && 'pending' in opts ? opts.pending : null;
        let status = this.status;
        if (status == async$.FutureStatus.fulfilled) {
          return fulfilled == null ? null : fulfilled(TL().as(this.result));
        } else if (status == async$.FutureStatus.rejected) {
          return rejected == null ? null : rejected(this.result);
        }
        return pending == null ? null : pending();
      }
      replace(nextFuture) {
        FutureLOfTL().as(nextFuture);
        return new (ObservableFutureOfTL()).__(this[_context$0], nextFuture, this.status, this.result, this.name);
      }
      asStream() {
        return new (ObservableStreamOfTL()).__(this[_context$0], this[_future$].asStream(), this.value, false, dart.str(this.name) + "_asStream");
      }
      catchError(onError, opts) {
        let test = opts && 'test' in opts ? opts.test : null;
        return new (ObservableFutureOfTL()).__(this[_context$0], this[_future$].catchError(onError, {test: test}), async$.FutureStatus.pending, null, this.name);
      }
      then(R, onValue, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        return new (async$.ObservableFuture$(dart.legacy(R))).__(this[_context$0], this[_future$].then(dart.legacy(R), onValue, {onError: onError}), async$.FutureStatus.pending, null, this.name);
      }
      timeout(timeLimit, opts) {
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        VoidToLFutureOrLOfTL().as(onTimeout);
        return new (ObservableFutureOfTL()).__(this[_context$0], this[_future$].timeout(timeLimit, {onTimeout: onTimeout}), async$.FutureStatus.pending, null, this.name);
      }
      whenComplete(action) {
        return new (ObservableFutureOfTL()).__(this[_context$0], this[_future$].whenComplete(action), async$.FutureStatus.pending, null, this.name);
      }
    }
    (ObservableFuture.new = function(future, opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableFuture.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), future, async$.FutureStatus.pending, null, name);
    }).prototype = ObservableFuture.prototype;
    (ObservableFuture.value = function(value, opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableFuture.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), FutureOfTL().value(value), async$.FutureStatus.fulfilled, value, name);
    }).prototype = ObservableFuture.prototype;
    (ObservableFuture.error = function(error, opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableFuture.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), FutureOfTL().error(error), async$.FutureStatus.rejected, error, name);
    }).prototype = ObservableFuture.prototype;
    (ObservableFuture.__ = function(_context, _future, _initialStatus, _initialResult, name) {
      let t14;
      this[_result] = null;
      this[_name$0] = null;
      this[_context$0] = _context;
      this[_future$] = _future;
      this[_initialStatus$] = _initialStatus;
      this[_initialResult$] = _initialResult;
      this[_name$0] = (t14 = name, t14 == null ? this[_context$0].nameFor("ObservableFuture<" + dart.str(dart.wrapType(TL())) + ">") : t14);
      this[_result] = new (FutureResultOfTL()).new(this[_context$0], this[_future$], this[_initialResult$], this[_initialStatus$], this[_name$0]);
      this[_initialResult$] = null;
      this[_initialStatus$] = null;
    }).prototype = ObservableFuture.prototype;
    ObservableFuture.prototype[dart.isFuture] = true;
    dart.addTypeTests(ObservableFuture);
    ObservableFuture.prototype[_is_ObservableFuture_default] = true;
    dart.addTypeCaches(ObservableFuture);
    ObservableFuture[dart.implements] = () => [async.Future$(dart.legacy(T)), core$.ObservableValue$(dart.legacy(T))];
    dart.setMethodSignature(ObservableFuture, () => ({
      __proto__: dart.getMethods(ObservableFuture.__proto__),
      match: dart.gFnType(R => [dart.legacy(R), [], {fulfilled: dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(T)])), pending: dart.legacy(dart.fnType(dart.legacy(R), [])), rejected: dart.legacy(dart.fnType(dart.legacy(R), [dart.dynamic]))}, {}]),
      replace: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(core.Object)]),
      asStream: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), []),
      catchError: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(core.Function)], {test: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]))}, {}),
      then: dart.gFnType(R => [dart.legacy(async$.ObservableFuture$(dart.legacy(R))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(R))), [dart.legacy(T)]))], {onError: dart.legacy(core.Function)}, {}]),
      timeout: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(core.Duration)], {onTimeout: dart.legacy(core.Object)}, {}),
      whenComplete: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.dynamic, []))])
    }));
    dart.setGetterSignature(ObservableFuture, () => ({
      __proto__: dart.getGetters(ObservableFuture.__proto__),
      name: dart.legacy(core.String),
      status: dart.legacy(async$.FutureStatus),
      value: dart.legacy(T),
      error: dart.dynamic,
      result: dart.dynamic
    }));
    dart.setLibraryUri(ObservableFuture, I[4]);
    dart.setFieldSignature(ObservableFuture, () => ({
      __proto__: dart.getFields(ObservableFuture.__proto__),
      [_context$0]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
      [_future$]: dart.fieldType(dart.legacy(async.Future$(dart.legacy(T)))),
      [_initialStatus$]: dart.fieldType(dart.legacy(async$.FutureStatus)),
      [_initialResult$]: dart.fieldType(dart.dynamic),
      [_result]: dart.fieldType(dart.legacy(async$.FutureResult$(dart.legacy(T)))),
      [_name$0]: dart.fieldType(dart.legacy(core.String))
    }));
    return ObservableFuture;
  });
  async$.ObservableFuture = async$.ObservableFuture$();
  dart.addTypeTests(async$.ObservableFuture, _is_ObservableFuture_default);
  async$.StreamStatus = class StreamStatus extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (async$.StreamStatus.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = async$.StreamStatus.prototype;
  dart.addTypeTests(async$.StreamStatus);
  dart.addTypeCaches(async$.StreamStatus);
  dart.setMethodSignature(async$.StreamStatus, () => ({
    __proto__: dart.getMethods(async$.StreamStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(async$.StreamStatus, I[4]);
  dart.setFieldSignature(async$.StreamStatus, () => ({
    __proto__: dart.getFields(async$.StreamStatus.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(async$.StreamStatus, ['toString']);
  async$.StreamStatus.waiting = C[6] || CT.C6;
  async$.StreamStatus.active = C[7] || CT.C7;
  async$.StreamStatus.done = C[8] || CT.C8;
  async$.StreamStatus.values = C[9] || CT.C9;
  var _controllerField = dart.privateName(async$, "_controllerField");
  var _stream$ = dart.privateName(async$, "_stream");
  var _initialValue$ = dart.privateName(async$, "_initialValue");
  var _cancelOnError$ = dart.privateName(async$, "_cancelOnError");
  var _controller = dart.privateName(async$, "_controller");
  var _wrap = dart.privateName(async$, "_wrap");
  var _wrapFuture = dart.privateName(async$, "_wrapFuture");
  const _is_ObservableStream_default = Symbol('_is_ObservableStream_default');
  async$.ObservableStream$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _ObservableStreamControllerOfTL = () => (_ObservableStreamControllerOfTL = dart.constFn(async$._ObservableStreamController$(TL())))();
    var ObservableStreamOfTL = () => (ObservableStreamOfTL = dart.constFn(async$.ObservableStream$(TL())))();
    var VoidToTL = () => (VoidToTL = dart.constFn(dart.fnType(TL(), [])))();
    var VoidToLTL = () => (VoidToLTL = dart.constFn(dart.legacy(VoidToTL())))();
    var StreamConsumerOfTL = () => (StreamConsumerOfTL = dart.constFn(async.StreamConsumer$(TL())))();
    var StreamConsumerLOfTL = () => (StreamConsumerLOfTL = dart.constFn(dart.legacy(StreamConsumerOfTL())))();
    var TLAndTLToTL = () => (TLAndTLToTL = dart.constFn(dart.fnType(TL(), [TL(), TL()])))();
    var TLAndTLToLTL = () => (TLAndTLToLTL = dart.constFn(dart.legacy(TLAndTLToTL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var SetOfTL = () => (SetOfTL = dart.constFn(core.Set$(TL())))();
    var SetLOfTL = () => (SetLOfTL = dart.constFn(dart.legacy(SetOfTL())))();
    class ObservableStream extends core.Object {
      get name() {
        return this[_name$0];
      }
      get [_controller]() {
        if (this[_controllerField] == null) {
          this[_controllerField] = new (_ObservableStreamControllerOfTL()).new(this[_context$0], this[_stream$], this[_initialValue$], {cancelOnError: this[_cancelOnError$], name: dart.str(this.name) + ".StreamController"});
          this[_initialValue$] = null;
        }
        return this[_controllerField];
      }
      get data() {
        return this[_controller].data;
      }
      get value() {
        return TL().as(this[_controller].valueType == async$._ValueType.value ? this[_controller].data : null);
      }
      get error() {
        return this[_controller].valueType == async$._ValueType.error ? this[_controller].data : null;
      }
      get hasError() {
        return this[_controller].valueType == async$._ValueType.error;
      }
      get status() {
        return this[_controller].status;
      }
      match(R, opts) {
        let waiting = opts && 'waiting' in opts ? opts.waiting : null;
        let active = opts && 'active' in opts ? opts.active : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let done = opts && 'done' in opts ? opts.done : null;
        let status = this[_controller].status;
        if (status == async$.StreamStatus.waiting) {
          return waiting == null ? null : waiting();
        }
        let data = this[_controller].data;
        let hasValue = this[_controller].valueType == async$._ValueType.value;
        let overrideDone = status == async$.StreamStatus.done && done == null;
        let isActive = status == async$.StreamStatus.active;
        if (isActive || overrideDone) {
          if (hasValue) {
            return active == null ? null : active(TL().as(data));
          } else {
            return error == null ? null : error(data);
          }
        }
        return hasValue ? done(TL().as(data), null) : done(null, data);
      }
      configure(opts) {
        let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
        TL().as(initialValue);
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
        return new (ObservableStreamOfTL()).__(this[_context$0], this[_stream$], initialValue, cancelOnError, this.name);
      }
      [_wrap](R, stream) {
        return new (async$.ObservableStream$(dart.legacy(R))).__(this[_context$0], stream, null, this[_cancelOnError$], this.name);
      }
      [_wrapFuture](R, future) {
        return new (async$.ObservableFuture$(dart.legacy(R))).__(this[_context$0], future, async$.FutureStatus.pending, null, this.name);
      }
      any(test) {
        return this[_wrapFuture](T$.boolL(), this[_stream$].any(test));
      }
      asBroadcastStream(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        return this[_wrap](TL(), this[_stream$].asBroadcastStream({onListen: onListen, onCancel: onCancel}));
      }
      asyncExpand(E, convert) {
        return this[_wrap](dart.legacy(E), this[_stream$].asyncExpand(dart.legacy(E), convert));
      }
      asyncMap(E, convert) {
        return this[_wrap](dart.legacy(E), this[_stream$].asyncMap(dart.legacy(E), convert));
      }
      cast(R) {
        return this[_wrap](dart.legacy(R), this[_stream$].cast(dart.legacy(R)));
      }
      contains(needle) {
        return this[_wrapFuture](T$.boolL(), this[_stream$].contains(needle));
      }
      distinct(equals = null) {
        return this[_wrap](TL(), this[_stream$].distinct(equals));
      }
      drain(E, futureValue = null) {
        return this[_wrapFuture](dart.legacy(E), this[_stream$].drain(dart.legacy(E), futureValue));
      }
      elementAt(index) {
        return this[_wrapFuture](TL(), this[_stream$].elementAt(index));
      }
      every(test) {
        return this[_wrapFuture](T$.boolL(), this[_stream$].every(test));
      }
      expand(S, convert) {
        return this[_wrap](dart.legacy(S), this[_stream$].expand(dart.legacy(S), convert));
      }
      get first() {
        return this[_wrapFuture](TL(), this[_stream$].first);
      }
      firstWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLTL().as(orElse);
        return this[_wrapFuture](TL(), this[_stream$].firstWhere(test, {orElse: orElse}));
      }
      fold(S, initialValue, combine) {
        return this[_wrapFuture](dart.legacy(S), this[_stream$].fold(dart.legacy(S), initialValue, combine));
      }
      forEach(action) {
        return this[_wrapFuture](dart.dynamic, this[_stream$].forEach(action));
      }
      handleError(onError, opts) {
        let test = opts && 'test' in opts ? opts.test : null;
        return this[_wrap](TL(), this[_stream$].handleError(onError, {test: test}));
      }
      get isBroadcast() {
        return this[_stream$].isBroadcast;
      }
      get isEmpty() {
        return this[_wrapFuture](T$.boolL(), this[_stream$].isEmpty);
      }
      join(separator = "") {
        return this[_wrapFuture](T$.StringL(), this[_stream$].join(separator));
      }
      get last() {
        return this[_wrapFuture](TL(), this[_stream$].last);
      }
      lastWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLTL().as(orElse);
        return this[_wrapFuture](TL(), this[_stream$].lastWhere(test, {orElse: orElse}));
      }
      get length() {
        return this[_wrapFuture](T$.intL(), this[_stream$].length);
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let sub = this[_stream$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
        return sub;
      }
      map(S, convert) {
        return this[_wrap](dart.legacy(S), this[_stream$].map(dart.legacy(S), convert));
      }
      pipe(streamConsumer) {
        StreamConsumerLOfTL().as(streamConsumer);
        return this[_wrapFuture](dart.dynamic, this[_stream$].pipe(streamConsumer));
      }
      reduce(combine) {
        TLAndTLToLTL().as(combine);
        return this[_wrapFuture](TL(), this[_stream$].reduce(combine));
      }
      get single() {
        return this[_wrapFuture](TL(), this[_stream$].single);
      }
      singleWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLTL().as(orElse);
        return this[_wrapFuture](TL(), this[_stream$].singleWhere(test, {orElse: orElse}));
      }
      skip(count) {
        return this[_wrap](TL(), this[_stream$].skip(count));
      }
      skipWhile(test) {
        return this[_wrap](TL(), this[_stream$].skipWhile(test));
      }
      take(count) {
        return this[_wrap](TL(), this[_stream$].take(count));
      }
      takeWhile(test) {
        return this[_wrap](TL(), this[_stream$].takeWhile(test));
      }
      timeout(timeLimit, opts) {
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        return this[_wrap](TL(), this[_stream$].timeout(timeLimit, {onTimeout: onTimeout}));
      }
      toList() {
        return this[_wrapFuture](ListLOfTL(), this[_stream$].toList());
      }
      toSet() {
        return this[_wrapFuture](SetLOfTL(), this[_stream$].toSet());
      }
      transform(S, streamTransformer) {
        dart.legacy(async.StreamTransformer$(TL(), dart.legacy(S))).as(streamTransformer);
        return this[_wrap](dart.legacy(S), this[_stream$].transform(dart.legacy(S), streamTransformer));
      }
      where(test) {
        return this[_wrap](TL(), this[_stream$].where(test));
      }
    }
    (ObservableStream.new = function(stream, opts) {
      let t14;
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableStream.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), stream, initialValue, cancelOnError, name);
    }).prototype = ObservableStream.prototype;
    (ObservableStream.__ = function(context, _stream, _initialValue, _cancelOnError, name) {
      let t14;
      this[_name$0] = null;
      this[_controllerField] = null;
      this[_stream$] = _stream;
      this[_initialValue$] = _initialValue;
      this[_cancelOnError$] = _cancelOnError;
      this[_context$0] = context;
      this[_name$0] = (t14 = name, t14 == null ? this[_context$0].nameFor("ObservableStream<" + dart.str(dart.wrapType(TL())) + ">") : t14);
    }).prototype = ObservableStream.prototype;
    ObservableStream.prototype[dart.isStream] = true;
    dart.addTypeTests(ObservableStream);
    ObservableStream.prototype[_is_ObservableStream_default] = true;
    dart.addTypeCaches(ObservableStream);
    ObservableStream[dart.implements] = () => [async.Stream$(dart.legacy(T)), core$.ObservableValue$(dart.legacy(T))];
    dart.setMethodSignature(ObservableStream, () => ({
      __proto__: dart.getMethods(ObservableStream.__proto__),
      match: dart.gFnType(R => [dart.legacy(R), [], {active: dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(T)])), done: dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(T), dart.dynamic])), error: dart.legacy(dart.fnType(dart.legacy(R), [dart.dynamic])), waiting: dart.legacy(dart.fnType(dart.legacy(R), []))}, {}]),
      configure: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [], {cancelOnError: dart.legacy(core.bool), initialValue: dart.legacy(core.Object)}, {}),
      [_wrap]: dart.gFnType(R => [dart.legacy(async$.ObservableStream$(dart.legacy(R))), [dart.legacy(async.Stream$(dart.legacy(R)))]]),
      [_wrapFuture]: dart.gFnType(R => [dart.legacy(async$.ObservableFuture$(dart.legacy(R))), [dart.legacy(async.Future$(dart.legacy(R)))]]),
      any: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(core.bool))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      asBroadcastStream: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [], {onCancel: dart.legacy(dart.fnType(dart.void, [dart.legacy(async.StreamSubscription$(dart.legacy(T)))])), onListen: dart.legacy(dart.fnType(dart.void, [dart.legacy(async.StreamSubscription$(dart.legacy(T)))]))}, {}),
      asyncExpand: dart.gFnType(E => [dart.legacy(async$.ObservableStream$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(E))), [dart.legacy(T)]))]]),
      asyncMap: dart.gFnType(E => [dart.legacy(async$.ObservableStream$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(E))), [dart.legacy(T)]))]]),
      cast: dart.gFnType(R => [dart.legacy(async$.ObservableStream$(dart.legacy(R))), []]),
      contains: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(core.bool))), [dart.legacy(core.Object)]),
      distinct: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [], [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T), dart.legacy(T)]))]),
      drain: dart.gFnType(E => [dart.legacy(async$.ObservableFuture$(dart.legacy(E))), [], [dart.legacy(E)]]),
      elementAt: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(core.int)]),
      every: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(core.bool))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      expand: dart.gFnType(S => [dart.legacy(async$.ObservableStream$(dart.legacy(S))), [dart.legacy(dart.fnType(dart.legacy(core.Iterable$(dart.legacy(S))), [dart.legacy(T)]))]]),
      firstWhere: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))], {orElse: dart.legacy(core.Object)}, {}),
      fold: dart.gFnType(S => [dart.legacy(async$.ObservableFuture$(dart.legacy(S))), [dart.legacy(S), dart.legacy(dart.fnType(dart.legacy(S), [dart.legacy(S), dart.legacy(T)]))]]),
      forEach: dart.fnType(dart.legacy(async$.ObservableFuture), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))]),
      handleError: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [dart.legacy(core.Function)], {test: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.dynamic]))}, {}),
      join: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(core.String))), [], [dart.legacy(core.String)]),
      lastWhere: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))], {orElse: dart.legacy(core.Object)}, {}),
      listen: dart.fnType(dart.legacy(async.StreamSubscription$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.void, [dart.legacy(T)]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {}),
      map: dart.gFnType(S => [dart.legacy(async$.ObservableStream$(dart.legacy(S))), [dart.legacy(dart.fnType(dart.legacy(S), [dart.legacy(T)]))]]),
      pipe: dart.fnType(dart.legacy(async$.ObservableFuture), [dart.legacy(core.Object)]),
      reduce: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(core.Object)]),
      singleWhere: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))], {orElse: dart.legacy(core.Object)}, {}),
      skip: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [dart.legacy(core.int)]),
      skipWhile: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      take: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [dart.legacy(core.int)]),
      takeWhile: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      timeout: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [dart.legacy(core.Duration)], {onTimeout: dart.legacy(dart.fnType(dart.void, [dart.legacy(async.EventSink$(dart.legacy(T)))]))}, {}),
      toList: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(core.List$(dart.legacy(T))))), []),
      toSet: dart.fnType(dart.legacy(async$.ObservableFuture$(dart.legacy(core.Set$(dart.legacy(T))))), []),
      transform: dart.gFnType(S => [dart.legacy(async$.ObservableStream$(dart.legacy(S))), [dart.legacy(core.Object)]]),
      where: dart.fnType(dart.legacy(async$.ObservableStream$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))])
    }));
    dart.setGetterSignature(ObservableStream, () => ({
      __proto__: dart.getGetters(ObservableStream.__proto__),
      name: dart.legacy(core.String),
      [_controller]: dart.legacy(async$._ObservableStreamController$(dart.legacy(T))),
      data: dart.dynamic,
      value: dart.legacy(T),
      error: dart.dynamic,
      hasError: dart.legacy(core.bool),
      status: dart.legacy(async$.StreamStatus),
      first: dart.legacy(async$.ObservableFuture$(dart.legacy(T))),
      isBroadcast: dart.legacy(core.bool),
      isEmpty: dart.legacy(async$.ObservableFuture$(dart.legacy(core.bool))),
      last: dart.legacy(async$.ObservableFuture$(dart.legacy(T))),
      length: dart.legacy(async$.ObservableFuture$(dart.legacy(core.int))),
      single: dart.legacy(async$.ObservableFuture$(dart.legacy(T)))
    }));
    dart.setLibraryUri(ObservableStream, I[4]);
    dart.setFieldSignature(ObservableStream, () => ({
      __proto__: dart.getFields(ObservableStream.__proto__),
      [_initialValue$]: dart.fieldType(dart.legacy(T)),
      [_cancelOnError$]: dart.finalFieldType(dart.legacy(core.bool)),
      [_context$0]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
      [_stream$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T)))),
      [_name$0]: dart.fieldType(dart.legacy(core.String)),
      [_controllerField]: dart.fieldType(dart.legacy(async$._ObservableStreamController$(dart.legacy(T))))
    }));
    return ObservableStream;
  });
  async$.ObservableStream = async$.ObservableStream$();
  dart.addTypeTests(async$.ObservableStream, _is_ObservableStream_default);
  async$._ValueType = class _ValueType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (async$._ValueType.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = async$._ValueType.prototype;
  dart.addTypeTests(async$._ValueType);
  dart.addTypeCaches(async$._ValueType);
  dart.setMethodSignature(async$._ValueType, () => ({
    __proto__: dart.getMethods(async$._ValueType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(async$._ValueType, I[4]);
  dart.setFieldSignature(async$._ValueType, () => ({
    __proto__: dart.getFields(async$._ValueType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(async$._ValueType, ['toString']);
  async$._ValueType.value = C[10] || CT.C10;
  async$._ValueType.error = C[11] || CT.C11;
  async$._ValueType.values = C[12] || CT.C12;
  var _subscription = dart.privateName(async$, "_subscription");
  var _listenCount = dart.privateName(async$, "_listenCount");
  var _valueType = dart.privateName(async$, "_valueType");
  var _data = dart.privateName(async$, "_data");
  var _listen = dart.privateName(async$, "_listen");
  var _unsubscribe = dart.privateName(async$, "_unsubscribe");
  var _onData = dart.privateName(async$, "_onData");
  var _onError = dart.privateName(async$, "_onError");
  var _onDone = dart.privateName(async$, "_onDone");
  const _is__ObservableStreamController_default = Symbol('_is__ObservableStreamController_default');
  async$._ObservableStreamController$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class _ObservableStreamController extends core.Object {
      get valueType() {
        return this[_valueType].value;
      }
      get data() {
        return this[_data].value;
      }
      get status() {
        return this[_status].value;
      }
      [_listen]() {
        this[_listenCount] = dart.notNull(this[_listenCount]) + 1;
        if (this[_subscription] == null) {
          this[_subscription] = this[_stream$].listen(dart.bind(this, _onData), {onError: dart.bind(this, _onError), onDone: dart.bind(this, _onDone), cancelOnError: this[_cancelOnError$]});
        } else if (dart.test(this[_subscription].isPaused)) {
          this[_subscription].resume();
        }
      }
      [_unsubscribe]() {
        let t14;
        this[_listenCount] = dart.notNull(this[_listenCount]) - 1;
        if (this[_listenCount] === 0 && !dart.test(this[_subscription].isPaused)) {
          t14 = this[_subscription];
          t14 == null ? null : t14.pause();
        }
      }
      [_onData](data) {
        TL().as(data);
        let actionInfo = this[_actions].startAction();
        try {
          this[_status].value = async$.StreamStatus.active;
          this[_valueType].value = async$._ValueType.value;
          this[_data].value = data;
        } finally {
          this[_actions].endAction(actionInfo);
        }
      }
      [_onError](error) {
        let actionInfo = this[_actions].startAction();
        try {
          this[_status].value = async$.StreamStatus.active;
          this[_valueType].value = async$._ValueType.error;
          this[_data].value = error;
        } finally {
          this[_actions].endAction(actionInfo);
        }
      }
      [_onDone]() {
        let actionInfo = this[_actions].startAction();
        try {
          this[_status].value = async$.StreamStatus.done;
        } finally {
          this[_actions].endAction(actionInfo);
        }
      }
    }
    (_ObservableStreamController.new = function(context, _stream, initialValue, opts) {
      let t14, t14$, t14$0;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_subscription] = null;
      this[_listenCount] = 0;
      this[_stream$] = _stream;
      this.name = name;
      this[_actions] = new core$.ActionController.new({context: context, name: dart.str(name) + ".ActionController"});
      this[_status] = T$.ObservableOfStreamStatusL().new(initialValue == null ? async$.StreamStatus.waiting : async$.StreamStatus.active, {context: context, name: dart.str(name) + ".status"});
      this[_valueType] = T$.ObservableOf_ValueTypeL().new(async$._ValueType.value, {context: context, name: dart.str(name) + ".valueType"});
      this[_data] = core$.Observable.new(initialValue, {context: context, name: dart.str(name) + ".data"});
      this[_cancelOnError$] = cancelOnError;
      t14 = this[_status];
      (() => {
        t14.onBecomeObserved(dart.bind(this, _listen));
        t14.onBecomeUnobserved(dart.bind(this, _unsubscribe));
        return t14;
      })();
      t14$ = this[_valueType];
      (() => {
        t14$.onBecomeObserved(dart.bind(this, _listen));
        t14$.onBecomeUnobserved(dart.bind(this, _unsubscribe));
        return t14$;
      })();
      t14$0 = this[_data];
      (() => {
        t14$0.onBecomeObserved(dart.bind(this, _listen));
        t14$0.onBecomeUnobserved(dart.bind(this, _unsubscribe));
        return t14$0;
      })();
    }).prototype = _ObservableStreamController.prototype;
    dart.addTypeTests(_ObservableStreamController);
    _ObservableStreamController.prototype[_is__ObservableStreamController_default] = true;
    dart.addTypeCaches(_ObservableStreamController);
    dart.setMethodSignature(_ObservableStreamController, () => ({
      __proto__: dart.getMethods(_ObservableStreamController.__proto__),
      [_listen]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, []),
      [_onData]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_onError]: dart.fnType(dart.void, [dart.dynamic]),
      [_onDone]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_ObservableStreamController, () => ({
      __proto__: dart.getGetters(_ObservableStreamController.__proto__),
      valueType: dart.legacy(async$._ValueType),
      data: dart.dynamic,
      status: dart.legacy(async$.StreamStatus)
    }));
    dart.setLibraryUri(_ObservableStreamController, I[4]);
    dart.setFieldSignature(_ObservableStreamController, () => ({
      __proto__: dart.getFields(_ObservableStreamController.__proto__),
      name: dart.finalFieldType(dart.legacy(core.String)),
      [_cancelOnError$]: dart.finalFieldType(dart.legacy(core.bool)),
      [_stream$]: dart.finalFieldType(dart.legacy(async.Stream$(dart.legacy(T)))),
      [_subscription]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(T)))),
      [_actions]: dart.finalFieldType(dart.legacy(core$.ActionController)),
      [_valueType]: dart.finalFieldType(dart.legacy(core$.Observable$(dart.legacy(async$._ValueType)))),
      [_data]: dart.finalFieldType(dart.legacy(core$.Observable)),
      [_status]: dart.finalFieldType(dart.legacy(core$.Observable$(dart.legacy(async$.StreamStatus)))),
      [_listenCount]: dart.fieldType(dart.legacy(core.int))
    }));
    return _ObservableStreamController;
  });
  async$._ObservableStreamController = async$._ObservableStreamController$();
  dart.addTypeTests(async$._ObservableStreamController, _is__ObservableStreamController_default);
  var message$ = dart.privateName(core$, "MobXException.message");
  core$.MobXException = class MobXException extends core.Error {
    get message() {
      return this[message$];
    }
    set message(value) {
      this[message$] = value;
    }
    toString() {
      return this.message;
    }
  };
  (core$.MobXException.new = function(message) {
    this[message$] = message;
    core$.MobXException.__proto__.new.call(this);
    ;
  }).prototype = core$.MobXException.prototype;
  dart.addTypeTests(core$.MobXException);
  dart.addTypeCaches(core$.MobXException);
  core$.MobXException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(core$.MobXException, () => ({
    __proto__: dart.getMethods(core$.MobXException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(core$.MobXException, I[5]);
  dart.setFieldSignature(core$.MobXException, () => ({
    __proto__: dart.getFields(core$.MobXException.__proto__),
    message: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(core$.MobXException, ['toString']);
  core$.MobXCyclicReactionException = class MobXCyclicReactionException extends core$.MobXException {};
  (core$.MobXCyclicReactionException.new = function(message) {
    core$.MobXCyclicReactionException.__proto__.new.call(this, message);
    ;
  }).prototype = core$.MobXCyclicReactionException.prototype;
  dart.addTypeTests(core$.MobXCyclicReactionException);
  dart.addTypeCaches(core$.MobXCyclicReactionException);
  dart.setLibraryUri(core$.MobXCyclicReactionException, I[5]);
  var _exception = dart.privateName(core$, "_exception");
  var _stackTrace = dart.privateName(core$, "_stackTrace");
  core$.MobXCaughtException = class MobXCaughtException extends core$.MobXException {
    get exception() {
      return this[_exception];
    }
    get stackTrace() {
      return T$.StackTraceL().as(this[_stackTrace]);
    }
  };
  (core$.MobXCaughtException.new = function(exception, opts) {
    let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
    this[_exception] = exception;
    this[_stackTrace] = stackTrace;
    core$.MobXCaughtException.__proto__.new.call(this, "MobXCaughtException: " + dart.str(exception));
    ;
  }).prototype = core$.MobXCaughtException.prototype;
  dart.addTypeTests(core$.MobXCaughtException);
  dart.addTypeCaches(core$.MobXCaughtException);
  dart.setGetterSignature(core$.MobXCaughtException, () => ({
    __proto__: dart.getGetters(core$.MobXCaughtException.__proto__),
    exception: dart.legacy(core.Object),
    stackTrace: dart.legacy(core.StackTrace),
    [$stackTrace]: dart.legacy(core.StackTrace)
  }));
  dart.setLibraryUri(core$.MobXCaughtException, I[5]);
  dart.setFieldSignature(core$.MobXCaughtException, () => ({
    __proto__: dart.getFields(core$.MobXCaughtException.__proto__),
    [_exception]: dart.finalFieldType(dart.legacy(core.Object)),
    [_stackTrace]: dart.finalFieldType(dart.legacy(core.Object))
  }));
  dart.defineExtensionAccessors(core$.MobXCaughtException, ['stackTrace']);
  var _fn$ = dart.privateName(core$, "_fn");
  var _controller$ = dart.privateName(core$, "_controller");
  core$.Action = class Action extends core.Object {
    static new(fn, opts) {
      let t14;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return new core$.Action.__((t14 = context, t14 == null ? context$.mainContext : t14), fn, {name: name});
    }
    get name() {
      return this[_controller$].name;
    }
    call(args = C[13] || CT.C13, namedArgs = null) {
      let runInfo = this[_controller$].startAction();
      try {
        if (namedArgs == null) {
          return core.Function.apply(this[_fn$], args);
        } else {
          let namedSymbolArgs = namedArgs[$map](T$.SymbolL(), dart.dynamic, dart.fn((key, value) => new (T$.MapEntryOfSymbolL$dynamic()).__(new _internal.Symbol.new(key), value), T$.StringLAnddynamicToMapEntryLOfSymbolL$dynamic()));
          return core.Function.apply(this[_fn$], args, namedSymbolArgs);
        }
      } finally {
        this[_controller$].endAction(runInfo);
      }
    }
  };
  (core$.Action.__ = function(context, _fn, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    this[_fn$] = _fn;
    this[_controller$] = new core$.ActionController.new({context: context, name: name});
    ;
  }).prototype = core$.Action.prototype;
  dart.addTypeTests(core$.Action);
  dart.addTypeCaches(core$.Action);
  dart.setMethodSignature(core$.Action, () => ({
    __proto__: dart.getMethods(core$.Action.__proto__),
    call: dart.fnType(dart.dynamic, [], [dart.legacy(core.List), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))])
  }));
  dart.setGetterSignature(core$.Action, () => ({
    __proto__: dart.getGetters(core$.Action.__proto__),
    name: dart.legacy(core.String)
  }));
  dart.setLibraryUri(core$.Action, I[5]);
  dart.setFieldSignature(core$.Action, () => ({
    __proto__: dart.getFields(core$.Action.__proto__),
    [_controller$]: dart.finalFieldType(dart.legacy(core$.ActionController)),
    [_fn$]: dart.finalFieldType(dart.legacy(core.Function))
  }));
  var name$ = dart.privateName(core$, "ActionController.name");
  var _context$1 = dart.privateName(core$, "_context");
  core$.ActionController = class ActionController extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    startAction(opts) {
      let t14;
      let name = opts && 'name' in opts ? opts.name : null;
      let reportingName = (t14 = name, t14 == null ? this.name : t14);
      this[_context$1].spyReport(new core$.ActionSpyEvent.new({name: reportingName}));
      let startTime = new core.DateTime.now();
      let prevDerivation = this[_context$1].startUntracked();
      this[_context$1].startBatch();
      let prevAllowStateChanges = this[_context$1].startAllowStateChanges({allow: true});
      return new core$.ActionRunInfo.new({prevDerivation: prevDerivation, prevAllowStateChanges: prevAllowStateChanges, name: reportingName, startTime: startTime});
    }
    endAction(info) {
      let t14;
      this[_context$1].spyReport(new core$.EndedSpyEvent.new({type: "action", name: info.name, duration: new core.DateTime.now().difference(info.startTime)}));
      t14 = this[_context$1];
      (() => {
        t14.endAllowStateChanges({allow: info.prevAllowStateChanges});
        t14.endBatch();
        t14.endUntracked(info.prevDerivation);
        return t14;
      })();
    }
  };
  (core$.ActionController.new = function(opts) {
    let t14;
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    core$.ActionController.__.call(this, (t14 = context, t14 == null ? context$.mainContext : t14), {name: name});
  }).prototype = core$.ActionController.prototype;
  (core$.ActionController.__ = function(_context, opts) {
    let t14;
    let name = opts && 'name' in opts ? opts.name : null;
    this[_context$1] = _context;
    this[name$] = (t14 = name, t14 == null ? _context.nameFor("Action") : t14);
    ;
  }).prototype = core$.ActionController.prototype;
  dart.addTypeTests(core$.ActionController);
  dart.addTypeCaches(core$.ActionController);
  dart.setMethodSignature(core$.ActionController, () => ({
    __proto__: dart.getMethods(core$.ActionController.__proto__),
    startAction: dart.fnType(dart.legacy(core$.ActionRunInfo), [], {name: dart.legacy(core.String)}, {}),
    endAction: dart.fnType(dart.void, [dart.legacy(core$.ActionRunInfo)])
  }));
  dart.setLibraryUri(core$.ActionController, I[5]);
  dart.setFieldSignature(core$.ActionController, () => ({
    __proto__: dart.getFields(core$.ActionController.__proto__),
    [_context$1]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
    name: dart.finalFieldType(dart.legacy(core.String))
  }));
  var prevDerivation$ = dart.privateName(core$, "ActionRunInfo.prevDerivation");
  var prevAllowStateChanges$ = dart.privateName(core$, "ActionRunInfo.prevAllowStateChanges");
  var name$0 = dart.privateName(core$, "ActionRunInfo.name");
  var startTime$ = dart.privateName(core$, "ActionRunInfo.startTime");
  core$.ActionRunInfo = class ActionRunInfo extends core.Object {
    get prevDerivation() {
      return this[prevDerivation$];
    }
    set prevDerivation(value) {
      super.prevDerivation = value;
    }
    get prevAllowStateChanges() {
      return this[prevAllowStateChanges$];
    }
    set prevAllowStateChanges(value) {
      super.prevAllowStateChanges = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get startTime() {
      return this[startTime$];
    }
    set startTime(value) {
      super.startTime = value;
    }
  };
  (core$.ActionRunInfo.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let startTime = opts && 'startTime' in opts ? opts.startTime : null;
    let prevDerivation = opts && 'prevDerivation' in opts ? opts.prevDerivation : null;
    let prevAllowStateChanges = opts && 'prevAllowStateChanges' in opts ? opts.prevAllowStateChanges : null;
    this[name$0] = name;
    this[startTime$] = startTime;
    this[prevDerivation$] = prevDerivation;
    this[prevAllowStateChanges$] = prevAllowStateChanges;
    ;
  }).prototype = core$.ActionRunInfo.prototype;
  dart.addTypeTests(core$.ActionRunInfo);
  dart.addTypeCaches(core$.ActionRunInfo);
  dart.setLibraryUri(core$.ActionRunInfo, I[5]);
  dart.setFieldSignature(core$.ActionRunInfo, () => ({
    __proto__: dart.getFields(core$.ActionRunInfo.__proto__),
    prevDerivation: dart.finalFieldType(dart.legacy(core$.Derivation)),
    prevAllowStateChanges: dart.finalFieldType(dart.legacy(core.bool)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    startTime: dart.finalFieldType(dart.legacy(core.DateTime))
  }));
  core$._ListenerKind = class _ListenerKind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$._ListenerKind.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$._ListenerKind.prototype;
  dart.addTypeTests(core$._ListenerKind);
  dart.addTypeCaches(core$._ListenerKind);
  dart.setMethodSignature(core$._ListenerKind, () => ({
    __proto__: dart.getMethods(core$._ListenerKind.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(core$._ListenerKind, I[5]);
  dart.setFieldSignature(core$._ListenerKind, () => ({
    __proto__: dart.getFields(core$._ListenerKind.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(core$._ListenerKind, ['toString']);
  core$._ListenerKind.onBecomeObserved = C[14] || CT.C14;
  core$._ListenerKind.onBecomeUnobserved = C[15] || CT.C15;
  core$._ListenerKind.values = C[16] || CT.C16;
  var name$1 = dart.privateName(core$, "Atom.name");
  var _isPendingUnobservation = dart.privateName(core$, "_isPendingUnobservation");
  var _lowestObserverState = dart.privateName(core$, "_lowestObserverState");
  var _isBeingObserved = dart.privateName(core$, "_isBeingObserved");
  var _observers = dart.privateName(core$, "_observers");
  var _observationListeners = dart.privateName(core$, "_observationListeners");
  var _reportObserved = dart.privateName(core$, "_reportObserved");
  var _dependenciesState = dart.privateName(core$, "_dependenciesState");
  var _addObserver = dart.privateName(core$, "_addObserver");
  var _enqueueForUnobservation = dart.privateName(core$, "_enqueueForUnobservation");
  var _removeObserver = dart.privateName(core$, "_removeObserver");
  var _notifyOnBecomeObserved = dart.privateName(core$, "_notifyOnBecomeObserved");
  var _notifyOnBecomeUnobserved = dart.privateName(core$, "_notifyOnBecomeUnobserved");
  var _addListener = dart.privateName(core$, "_addListener");
  core$.Atom = class Atom extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    static new(opts) {
      let t14;
      let name = opts && 'name' in opts ? opts.name : null;
      let onObserved = opts && 'onObserved' in opts ? opts.onObserved : null;
      let onUnobserved = opts && 'onUnobserved' in opts ? opts.onUnobserved : null;
      let context = opts && 'context' in opts ? opts.context : null;
      return new core$.Atom.__((t14 = context, t14 == null ? context$.mainContext : t14), {name: name, onObserved: onObserved, onUnobserved: onUnobserved});
    }
    get context() {
      return this[_context$1];
    }
    get hasObservers() {
      return this[_observers][$isNotEmpty];
    }
    reportObserved() {
      this[_context$1][_reportObserved](this);
    }
    reportChanged() {
      let t14;
      t14 = this[_context$1];
      (() => {
        t14.startBatch();
        t14.propagateChanged(this);
        t14.endBatch();
        return t14;
      })();
    }
    [_addObserver](d) {
      this[_observers].add(d);
      if (dart.notNull(this[_lowestObserverState].index) > dart.notNull(d[_dependenciesState].index)) {
        this[_lowestObserverState] = d[_dependenciesState];
      }
    }
    [_removeObserver](d) {
      this[_observers].remove(d);
      if (dart.test(this[_observers][$isEmpty])) {
        this[_context$1][_enqueueForUnobservation](this);
      }
    }
    [_notifyOnBecomeObserved]() {
      let t14;
      let listeners = this[_observationListeners][$_get](core$._ListenerKind.onBecomeObserved);
      t14 = listeners;
      t14 == null ? null : t14[$forEach](C[17] || CT.C17);
    }
    static _notifyListener(listener) {
      return listener();
    }
    [_notifyOnBecomeUnobserved]() {
      let t14;
      let listeners = this[_observationListeners][$_get](core$._ListenerKind.onBecomeUnobserved);
      t14 = listeners;
      t14 == null ? null : t14[$forEach](C[17] || CT.C17);
    }
    onBecomeObserved(fn) {
      return this[_addListener](core$._ListenerKind.onBecomeObserved, fn);
    }
    onBecomeUnobserved(fn) {
      return this[_addListener](core$._ListenerKind.onBecomeUnobserved, fn);
    }
    [_addListener](kind, fn) {
      let t14;
      if (fn == null) {
        dart.throw(new core$.MobXException.new(dart.str(kind) + " handler cannot be null"));
      }
      if (this[_observationListeners][$_get](kind) == null) {
        this[_observationListeners][$_set](kind, (t14 = T$.LinkedHashSetOfVoidToLdynamic().new(), (() => {
          t14.add(T$.VoidToLdynamic().as(fn));
          return t14;
        })()));
      } else {
        this[_observationListeners][$_get](kind).add(T$.VoidToLdynamic().as(fn));
      }
      return dart.fn(() => {
        if (this[_observationListeners][$_get](kind) == null) {
          return;
        }
        this[_observationListeners][$_get](kind).removeWhere(dart.fn(f => dart.equals(f, fn), T$.FnToboolL()));
        if (dart.test(this[_observationListeners][$_get](kind)[$isEmpty])) {
          this[_observationListeners][$_set](kind, null);
        }
      }, T$.VoidToNull());
    }
  };
  (core$.Atom.__ = function(_context, opts) {
    let t14;
    let name = opts && 'name' in opts ? opts.name : null;
    let onObserved = opts && 'onObserved' in opts ? opts.onObserved : null;
    let onUnobserved = opts && 'onUnobserved' in opts ? opts.onUnobserved : null;
    this[_isPendingUnobservation] = false;
    this[_lowestObserverState] = core$.DerivationState.notTracking;
    this[_isBeingObserved] = false;
    this[_observers] = T$.LinkedHashSetOfDerivationL().new();
    this[_observationListeners] = new (T$.LinkedMapOf_ListenerKindL$SetLOfVoidToLdynamic()).new();
    this[_context$1] = _context;
    this[name$1] = (t14 = name, t14 == null ? _context.nameFor("Atom") : t14);
    if (onObserved != null) {
      this.onBecomeObserved(onObserved);
    }
    if (onUnobserved != null) {
      this.onBecomeUnobserved(onUnobserved);
    }
  }).prototype = core$.Atom.prototype;
  dart.addTypeTests(core$.Atom);
  dart.addTypeCaches(core$.Atom);
  dart.setMethodSignature(core$.Atom, () => ({
    __proto__: dart.getMethods(core$.Atom.__proto__),
    reportObserved: dart.fnType(dart.void, []),
    reportChanged: dart.fnType(dart.void, []),
    [_addObserver]: dart.fnType(dart.void, [dart.legacy(core$.Derivation)]),
    [_removeObserver]: dart.fnType(dart.void, [dart.legacy(core$.Derivation)]),
    [_notifyOnBecomeObserved]: dart.fnType(dart.void, []),
    [_notifyOnBecomeUnobserved]: dart.fnType(dart.void, []),
    onBecomeObserved: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(core.Function)]),
    onBecomeUnobserved: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(core.Function)]),
    [_addListener]: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(core$._ListenerKind), dart.legacy(core.Function)])
  }));
  dart.setGetterSignature(core$.Atom, () => ({
    __proto__: dart.getGetters(core$.Atom.__proto__),
    context: dart.legacy(core$.ReactiveContext),
    hasObservers: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(core$.Atom, I[5]);
  dart.setFieldSignature(core$.Atom, () => ({
    __proto__: dart.getFields(core$.Atom.__proto__),
    [_context$1]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    [_isPendingUnobservation]: dart.fieldType(dart.legacy(core.bool)),
    [_lowestObserverState]: dart.fieldType(dart.legacy(core$.DerivationState)),
    [_isBeingObserved]: dart.fieldType(dart.legacy(core.bool)),
    [_observers]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(core$.Derivation)))),
    [_observationListeners]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core$._ListenerKind), dart.legacy(core.Set$(dart.legacy(dart.fnType(dart.dynamic, [])))))))
  }));
  var type$2 = dart.privateName(core$, "WillChangeNotification.type");
  var newValue$1 = dart.privateName(core$, "WillChangeNotification.newValue");
  var object$1 = dart.privateName(core$, "WillChangeNotification.object");
  const _is_WillChangeNotification_default = Symbol('_is_WillChangeNotification_default');
  core$.WillChangeNotification$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class WillChangeNotification extends core.Object {
      get type() {
        return this[type$2];
      }
      set type(value) {
        super.type = value;
      }
      get newValue() {
        return this[newValue$1];
      }
      set newValue(value) {
        this[newValue$1] = TL().as(value);
      }
      get object() {
        return this[object$1];
      }
      set object(value) {
        super.object = value;
      }
    }
    (WillChangeNotification.new = function(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let object = opts && 'object' in opts ? opts.object : null;
      this[type$2] = type;
      this[newValue$1] = newValue;
      this[object$1] = object;
      ;
    }).prototype = WillChangeNotification.prototype;
    dart.addTypeTests(WillChangeNotification);
    WillChangeNotification.prototype[_is_WillChangeNotification_default] = true;
    dart.addTypeCaches(WillChangeNotification);
    dart.setLibraryUri(WillChangeNotification, I[5]);
    dart.setFieldSignature(WillChangeNotification, () => ({
      __proto__: dart.getFields(WillChangeNotification.__proto__),
      type: dart.finalFieldType(dart.legacy(core$.OperationType)),
      newValue: dart.fieldType(dart.legacy(T)),
      object: dart.finalFieldType(dart.dynamic)
    }));
    return WillChangeNotification;
  });
  core$.WillChangeNotification = core$.WillChangeNotification$();
  dart.defineLazy(core$.WillChangeNotification, {
    /*core$.WillChangeNotification.unchanged*/get unchanged() {
      return new core$.WillChangeNotification.new();
    },
    set unchanged(_) {}
  }, true);
  dart.addTypeTests(core$.WillChangeNotification, _is_WillChangeNotification_default);
  core$.OperationType = class OperationType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.OperationType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.OperationType.prototype;
  dart.addTypeTests(core$.OperationType);
  dart.addTypeCaches(core$.OperationType);
  dart.setMethodSignature(core$.OperationType, () => ({
    __proto__: dart.getMethods(core$.OperationType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(core$.OperationType, I[5]);
  dart.setFieldSignature(core$.OperationType, () => ({
    __proto__: dart.getFields(core$.OperationType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(core$.OperationType, ['toString']);
  core$.OperationType.add = C[18] || CT.C18;
  core$.OperationType.update = C[0] || CT.C0;
  core$.OperationType.remove = C[19] || CT.C19;
  core$.OperationType.values = C[20] || CT.C20;
  var type$3 = dart.privateName(core$, "ChangeNotification.type");
  var oldValue$1 = dart.privateName(core$, "ChangeNotification.oldValue");
  var newValue$2 = dart.privateName(core$, "ChangeNotification.newValue");
  var object$2 = dart.privateName(core$, "ChangeNotification.object");
  const _is_ChangeNotification_default = Symbol('_is_ChangeNotification_default');
  core$.ChangeNotification$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class ChangeNotification extends core.Object {
      get type() {
        return this[type$3];
      }
      set type(value) {
        super.type = value;
      }
      get oldValue() {
        return this[oldValue$1];
      }
      set oldValue(value) {
        super.oldValue = value;
      }
      get newValue() {
        return this[newValue$2];
      }
      set newValue(value) {
        this[newValue$2] = TL().as(value);
      }
      get object() {
        return this[object$2];
      }
      set object(value) {
        this[object$2] = value;
      }
    }
    (ChangeNotification.new = function(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
      let object = opts && 'object' in opts ? opts.object : null;
      this[type$3] = type;
      this[newValue$2] = newValue;
      this[oldValue$1] = oldValue;
      this[object$2] = object;
      ;
    }).prototype = ChangeNotification.prototype;
    dart.addTypeTests(ChangeNotification);
    ChangeNotification.prototype[_is_ChangeNotification_default] = true;
    dart.addTypeCaches(ChangeNotification);
    dart.setLibraryUri(ChangeNotification, I[5]);
    dart.setFieldSignature(ChangeNotification, () => ({
      __proto__: dart.getFields(ChangeNotification.__proto__),
      type: dart.finalFieldType(dart.legacy(core$.OperationType)),
      oldValue: dart.finalFieldType(dart.legacy(T)),
      newValue: dart.fieldType(dart.legacy(T)),
      object: dart.fieldType(dart.dynamic)
    }));
    return ChangeNotification;
  });
  core$.ChangeNotification = core$.ChangeNotification$();
  dart.addTypeTests(core$.ChangeNotification, _is_ChangeNotification_default);
  var equals$ = dart.privateName(core$, "Computed.equals");
  var _errorValue = dart.privateName(core$, "_errorValue");
  var _observables = dart.privateName(core$, "_observables");
  var _newObservables = dart.privateName(core$, "_newObservables");
  var _value$ = dart.privateName(core$, "_value");
  var _isComputing = dart.privateName(core$, "_isComputing");
  var _shouldCompute = dart.privateName(core$, "_shouldCompute");
  var _trackAndCompute = dart.privateName(core$, "_trackAndCompute");
  var _propagateChangeConfirmed = dart.privateName(core$, "_propagateChangeConfirmed");
  var _hasCaughtException = dart.privateName(core$, "_hasCaughtException");
  var _pushComputation = dart.privateName(core$, "_pushComputation");
  var _popComputation = dart.privateName(core$, "_popComputation");
  var _clearObservables = dart.privateName(core$, "_clearObservables");
  var _suspend = dart.privateName(core$, "_suspend");
  var _propagatePossiblyChanged = dart.privateName(core$, "_propagatePossiblyChanged");
  var _onBecomeStale = dart.privateName(core$, "_onBecomeStale");
  var _isEqual = dart.privateName(core$, "_isEqual");
  const _is_Computed_default = Symbol('_is_Computed_default');
  core$.Computed$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ChangeNotificationOfTL = () => (ChangeNotificationOfTL = dart.constFn(core$.ChangeNotification$(TL())))();
    class Computed extends core$.Atom {
      get equals() {
        return this[equals$];
      }
      set equals(value) {
        super.equals = value;
      }
      static new(fn, opts) {
        let t14;
        let name = opts && 'name' in opts ? opts.name : null;
        let context = opts && 'context' in opts ? opts.context : null;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        return new (core$.Computed$(dart.legacy(T))).__((t14 = context, t14 == null ? context$.mainContext : t14), fn, {name: name, equals: equals});
      }
      get errorValue() {
        return this[_errorValue];
      }
      get value() {
        if (dart.test(this[_isComputing])) {
          dart.throw(new core$.MobXCyclicReactionException.new("Cycle detected in computation " + dart.str(this.name) + ": " + dart.str(this[_fn$])));
        }
        if (!dart.test(this[_context$1].isWithinBatch) && dart.test(this[_observers][$isEmpty])) {
          if (dart.test(this[_context$1][_shouldCompute](this))) {
            this[_context$1].startBatch();
            this[_value$] = this.computeValue({track: false});
            this[_context$1].endBatch();
          }
        } else {
          this.reportObserved();
          if (dart.test(this[_context$1][_shouldCompute](this))) {
            if (dart.test(this[_trackAndCompute]())) {
              this[_context$1][_propagateChangeConfirmed](this);
            }
          }
        }
        if (dart.test(this[_context$1][_hasCaughtException](this))) {
          dart.throw(this[_errorValue]);
        }
        return this[_value$];
      }
      computeValue(opts) {
        let track = opts && 'track' in opts ? opts.track : null;
        this[_isComputing] = true;
        this[_context$1][_pushComputation]();
        let value = null;
        if (dart.test(track)) {
          value = this[_context$1].trackDerivation(TL(), this, this[_fn$]);
        } else {
          if (this[_context$1].config.disableErrorBoundaries === true) {
            value = this[_fn$]();
          } else {
            try {
              value = this[_fn$]();
              this[_errorValue] = null;
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              this[_errorValue] = new core$.MobXCaughtException.new(e, {stackTrace: s});
            }
          }
        }
        this[_context$1][_popComputation]();
        this[_isComputing] = false;
        return value;
      }
      [_suspend]() {
        this[_context$1][_clearObservables](this);
        this[_value$] = null;
      }
      [_onBecomeStale]() {
        this[_context$1][_propagatePossiblyChanged](this);
      }
      [_trackAndCompute]() {
        if (dart.test(this[_context$1].isSpyEnabled)) {
          this[_context$1].spyReport(new core$.ComputedValueSpyEvent.new(this, {name: this.name}));
        }
        let oldValue = this[_value$];
        let wasSuspended = this[_dependenciesState] == core$.DerivationState.notTracking;
        let newValue = this.computeValue({track: true});
        let changed = wasSuspended || dart.test(this[_context$1][_hasCaughtException](this)) || !dart.test(this[_isEqual](oldValue, newValue));
        if (changed) {
          this[_value$] = newValue;
        }
        return changed;
      }
      [_isEqual](x, y) {
        let t16, t15;
        return this.equals == null ? dart.equals(x, y) : (t15 = x, t16 = y, this.equals(t15, t16));
      }
      observe(handler, opts) {
        let t15;
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
        let prevValue = null;
        const notifyChange = () => {
          this[_context$1].untracked(core.Null, dart.fn(() => {
            handler(new (ChangeNotificationOfTL()).new({type: core$.OperationType.update, object: this, oldValue: prevValue, newValue: this.value}));
          }, T$.VoidToNull()));
        };
        dart.fn(notifyChange, T$.VoidTovoid());
        t15 = reaction.autorun(dart.fn(_ => {
          let newValue = this.value;
          notifyChange();
          prevValue = newValue;
        }, T$.ReactionLToNull()), {context: this[_context$1]});
        return t15 == null ? null : dart.bind(t15, 'call');
      }
    }
    (Computed.__ = function(context, _fn, opts) {
      let t14;
      let name = opts && 'name' in opts ? opts.name : null;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      this[_errorValue] = null;
      this[_observables] = T$.LinkedHashSetOfAtomL().new();
      this[_newObservables] = null;
      this[_dependenciesState] = core$.DerivationState.notTracking;
      this[_value$] = null;
      this[_isComputing] = false;
      this[_fn$] = _fn;
      this[equals$] = equals;
      Computed.__proto__.__.call(this, context, {name: (t14 = name, t14 == null ? context.nameFor("Computed") : t14)});
      ;
    }).prototype = Computed.prototype;
    dart.addTypeTests(Computed);
    Computed.prototype[_is_Computed_default] = true;
    dart.addTypeCaches(Computed);
    Computed[dart.implements] = () => [core$.Derivation, core$.ObservableValue$(dart.legacy(T))];
    dart.setMethodSignature(Computed, () => ({
      __proto__: dart.getMethods(Computed.__proto__),
      computeValue: dart.fnType(dart.legacy(T), [], {track: dart.legacy(core.bool)}, {}),
      [_suspend]: dart.fnType(dart.void, []),
      [_onBecomeStale]: dart.fnType(dart.void, []),
      [_trackAndCompute]: dart.fnType(dart.legacy(core.bool), []),
      [_isEqual]: dart.fnType(dart.legacy(core.bool), [dart.legacy(T), dart.legacy(T)]),
      observe: dart.fnType(dart.legacy(core.Function), [dart.legacy(dart.fnType(dart.void, [dart.legacy(core$.ChangeNotification$(dart.legacy(T)))]))], {fireImmediately: dart.legacy(core.bool)}, {})
    }));
    dart.setGetterSignature(Computed, () => ({
      __proto__: dart.getGetters(Computed.__proto__),
      errorValue: dart.legacy(core$.MobXCaughtException),
      value: dart.legacy(T)
    }));
    dart.setLibraryUri(Computed, I[5]);
    dart.setFieldSignature(Computed, () => ({
      __proto__: dart.getFields(Computed.__proto__),
      equals: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T), dart.legacy(T)]))),
      [_errorValue]: dart.fieldType(dart.legacy(core$.MobXCaughtException)),
      [_observables]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core$.Atom)))),
      [_newObservables]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core$.Atom)))),
      [_fn$]: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(T), []))),
      [_dependenciesState]: dart.fieldType(dart.legacy(core$.DerivationState)),
      [_value$]: dart.fieldType(dart.legacy(T)),
      [_isComputing]: dart.fieldType(dart.legacy(core.bool))
    }));
    return Computed;
  });
  core$.Computed = core$.Computed$();
  dart.addTypeTests(core$.Computed, _is_Computed_default);
  core$._ReactiveState = class _ReactiveState extends core.Object {
    get isWithinBatch() {
      return dart.notNull(this.batch) > 0;
    }
    get isWithinDerivation() {
      return this.trackingDerivation != null || dart.notNull(this.computationDepth) > 0;
    }
  };
  (core$._ReactiveState.new = function() {
    this.batch = 0;
    this.nextIdCounter = 0;
    this.trackingDerivation = null;
    this.pendingReactions = T$.JSArrayOfReactionL().of([]);
    this.isRunningReactions = false;
    this.pendingUnobservations = T$.JSArrayOfAtomL().of([]);
    this.computationDepth = 0;
    this.allowStateChanges = true;
    this.spyListeners = T$.JSArrayOfSpyEventLToLvoid().of([]);
    ;
  }).prototype = core$._ReactiveState.prototype;
  dart.addTypeTests(core$._ReactiveState);
  dart.addTypeCaches(core$._ReactiveState);
  dart.setGetterSignature(core$._ReactiveState, () => ({
    __proto__: dart.getGetters(core$._ReactiveState.__proto__),
    isWithinBatch: dart.legacy(core.bool),
    isWithinDerivation: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(core$._ReactiveState, I[5]);
  dart.setFieldSignature(core$._ReactiveState, () => ({
    __proto__: dart.getFields(core$._ReactiveState.__proto__),
    batch: dart.fieldType(dart.legacy(core.int)),
    nextIdCounter: dart.fieldType(dart.legacy(core.int)),
    trackingDerivation: dart.fieldType(dart.legacy(core$.Derivation)),
    pendingReactions: dart.fieldType(dart.legacy(core.List$(dart.legacy(core$.Reaction)))),
    isRunningReactions: dart.fieldType(dart.legacy(core.bool)),
    pendingUnobservations: dart.fieldType(dart.legacy(core.List$(dart.legacy(core$.Atom)))),
    computationDepth: dart.fieldType(dart.legacy(core.int)),
    allowStateChanges: dart.fieldType(dart.legacy(core.bool)),
    spyListeners: dart.fieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.void, [dart.legacy(core$.SpyEvent)])))))
  }));
  core$.ReactiveReadPolicy = class ReactiveReadPolicy extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.ReactiveReadPolicy.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.ReactiveReadPolicy.prototype;
  dart.addTypeTests(core$.ReactiveReadPolicy);
  dart.addTypeCaches(core$.ReactiveReadPolicy);
  dart.setMethodSignature(core$.ReactiveReadPolicy, () => ({
    __proto__: dart.getMethods(core$.ReactiveReadPolicy.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(core$.ReactiveReadPolicy, I[5]);
  dart.setFieldSignature(core$.ReactiveReadPolicy, () => ({
    __proto__: dart.getFields(core$.ReactiveReadPolicy.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(core$.ReactiveReadPolicy, ['toString']);
  core$.ReactiveReadPolicy.always = C[21] || CT.C21;
  core$.ReactiveReadPolicy.never = C[22] || CT.C22;
  core$.ReactiveReadPolicy.values = C[23] || CT.C23;
  core$.ReactiveWritePolicy = class ReactiveWritePolicy extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.ReactiveWritePolicy.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.ReactiveWritePolicy.prototype;
  dart.addTypeTests(core$.ReactiveWritePolicy);
  dart.addTypeCaches(core$.ReactiveWritePolicy);
  dart.setMethodSignature(core$.ReactiveWritePolicy, () => ({
    __proto__: dart.getMethods(core$.ReactiveWritePolicy.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(core$.ReactiveWritePolicy, I[5]);
  dart.setFieldSignature(core$.ReactiveWritePolicy, () => ({
    __proto__: dart.getFields(core$.ReactiveWritePolicy.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(core$.ReactiveWritePolicy, ['toString']);
  core$.ReactiveWritePolicy.observed = C[24] || CT.C24;
  core$.ReactiveWritePolicy.always = C[25] || CT.C25;
  core$.ReactiveWritePolicy.never = C[26] || CT.C26;
  core$.ReactiveWritePolicy.values = C[27] || CT.C27;
  var disableErrorBoundaries$ = dart.privateName(core$, "ReactiveConfig.disableErrorBoundaries");
  var writePolicy$ = dart.privateName(core$, "ReactiveConfig.writePolicy");
  var readPolicy$ = dart.privateName(core$, "ReactiveConfig.readPolicy");
  var maxIterations$ = dart.privateName(core$, "ReactiveConfig.maxIterations");
  var _reactionErrorHandlers = dart.privateName(core$, "_reactionErrorHandlers");
  core$.ReactiveConfig = class ReactiveConfig extends core.Object {
    get disableErrorBoundaries() {
      return this[disableErrorBoundaries$];
    }
    set disableErrorBoundaries(value) {
      super.disableErrorBoundaries = value;
    }
    get writePolicy() {
      return this[writePolicy$];
    }
    set writePolicy(value) {
      super.writePolicy = value;
    }
    get readPolicy() {
      return this[readPolicy$];
    }
    set readPolicy(value) {
      super.readPolicy = value;
    }
    get maxIterations() {
      return this[maxIterations$];
    }
    set maxIterations(value) {
      super.maxIterations = value;
    }
    clone(opts) {
      let t15, t15$, t15$0, t15$1;
      let disableErrorBoundaries = opts && 'disableErrorBoundaries' in opts ? opts.disableErrorBoundaries : null;
      let writePolicy = opts && 'writePolicy' in opts ? opts.writePolicy : null;
      let readPolicy = opts && 'readPolicy' in opts ? opts.readPolicy : null;
      let maxIterations = opts && 'maxIterations' in opts ? opts.maxIterations : null;
      return new core$.ReactiveConfig.new({disableErrorBoundaries: (t15 = disableErrorBoundaries, t15 == null ? this.disableErrorBoundaries : t15), writePolicy: (t15$ = writePolicy, t15$ == null ? this.writePolicy : t15$), readPolicy: (t15$0 = readPolicy, t15$0 == null ? this.readPolicy : t15$0), maxIterations: (t15$1 = maxIterations, t15$1 == null ? this.maxIterations : t15$1)});
    }
  };
  (core$.ReactiveConfig.new = function(opts) {
    let disableErrorBoundaries = opts && 'disableErrorBoundaries' in opts ? opts.disableErrorBoundaries : null;
    let writePolicy = opts && 'writePolicy' in opts ? opts.writePolicy : null;
    let readPolicy = opts && 'readPolicy' in opts ? opts.readPolicy : null;
    let maxIterations = opts && 'maxIterations' in opts ? opts.maxIterations : 100;
    this[_reactionErrorHandlers] = T$.LinkedHashSetOfObjectLAndReactionLToLvoid().new();
    this[disableErrorBoundaries$] = disableErrorBoundaries;
    this[writePolicy$] = writePolicy;
    this[readPolicy$] = readPolicy;
    this[maxIterations$] = maxIterations;
    ;
  }).prototype = core$.ReactiveConfig.prototype;
  dart.addTypeTests(core$.ReactiveConfig);
  dart.addTypeCaches(core$.ReactiveConfig);
  dart.setMethodSignature(core$.ReactiveConfig, () => ({
    __proto__: dart.getMethods(core$.ReactiveConfig.__proto__),
    clone: dart.fnType(dart.legacy(core$.ReactiveConfig), [], {disableErrorBoundaries: dart.legacy(core.bool), maxIterations: dart.legacy(core.int), readPolicy: dart.legacy(core$.ReactiveReadPolicy), writePolicy: dart.legacy(core$.ReactiveWritePolicy)}, {})
  }));
  dart.setLibraryUri(core$.ReactiveConfig, I[5]);
  dart.setFieldSignature(core$.ReactiveConfig, () => ({
    __proto__: dart.getFields(core$.ReactiveConfig.__proto__),
    disableErrorBoundaries: dart.finalFieldType(dart.legacy(core.bool)),
    writePolicy: dart.finalFieldType(dart.legacy(core$.ReactiveWritePolicy)),
    readPolicy: dart.finalFieldType(dart.legacy(core$.ReactiveReadPolicy)),
    maxIterations: dart.finalFieldType(dart.legacy(core.int)),
    [_reactionErrorHandlers]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core$.Reaction)])))))
  }));
  dart.defineLazy(core$.ReactiveConfig, {
    /*core$.ReactiveConfig.main*/get main() {
      return new core$.ReactiveConfig.new({disableErrorBoundaries: false, writePolicy: core$.ReactiveWritePolicy.observed, readPolicy: core$.ReactiveReadPolicy.never});
    }
  }, true);
  var _config = dart.privateName(core$, "_config");
  var _state = dart.privateName(core$, "_state");
  var _resetDerivationState = dart.privateName(core$, "_resetDerivationState");
  var _startTracking = dart.privateName(core$, "_startTracking");
  var _bindDependencies = dart.privateName(core$, "_bindDependencies");
  var _endTracking = dart.privateName(core$, "_endTracking");
  var _runReactionsInternal = dart.privateName(core$, "_runReactionsInternal");
  var _resetState = dart.privateName(core$, "_resetState");
  var _run$ = dart.privateName(core$, "_run");
  var _notifyReactionErrorHandlers = dart.privateName(core$, "_notifyReactionErrorHandlers");
  core$.ReactiveContext = class ReactiveContext extends core.Object {
    get config() {
      return this[_config];
    }
    set config(newValue) {
      this[_config] = newValue;
      this[_state].allowStateChanges = this[_config].writePolicy == core$.ReactiveWritePolicy.never;
    }
    get nextId() {
      let t15;
      t15 = this[_state];
      return t15.nextIdCounter = dart.notNull(t15.nextIdCounter) + 1;
    }
    nameFor(prefix) {
      if (!(prefix != null)) dart.assertFailed(null, I[6], 116, 12, "prefix != null");
      if (!prefix[$isNotEmpty]) dart.assertFailed(null, I[6], 117, 12, "prefix.isNotEmpty");
      return dart.str(prefix) + "@" + dart.str(this.nextId);
    }
    get isWithinBatch() {
      return this[_state].isWithinBatch;
    }
    get isSpyEnabled() {
      return dart.test(core$._isDebugMode) && dart.test(this[_state].spyListeners[$isNotEmpty]);
    }
    spy(listener) {
      this[_state].spyListeners[$add](listener);
      return T$.VoidToLvoid().as(core$._once(dart.fn(() => {
        this[_state].spyListeners[$remove](listener);
      }, T$.VoidToNull())));
    }
    spyReport(event) {
      if (!dart.test(this.isSpyEnabled)) {
        return;
      }
      for (let i = 0; i < dart.notNull(this[_state].spyListeners[$length]); i = i + 1) {
        this[_state].spyListeners[$_get](i)(event);
      }
    }
    startBatch() {
      let t15;
      t15 = this[_state];
      t15.batch = dart.notNull(t15.batch) + 1;
    }
    endBatch() {
      let t15, t15$, t15$0;
      if ((t15 = this[_state], t15.batch = dart.notNull(t15.batch) - 1) === 0) {
        this.runReactions();
        for (let i = 0; i < dart.notNull(this[_state].pendingUnobservations[$length]); i = i + 1) {
          let ob = (t15$ = this[_state].pendingUnobservations[$_get](i), (() => {
            t15$[_isPendingUnobservation] = false;
            return t15$;
          })());
          if (dart.test(ob[_observers][$isEmpty])) {
            if (dart.test(ob[_isBeingObserved])) {
              t15$0 = ob;
              (() => {
                t15$0[_isBeingObserved] = false;
                t15$0[_notifyOnBecomeUnobserved]();
                return t15$0;
              })();
            }
            if (T$.ComputedL().is(ob)) {
              ob[_suspend]();
            }
          }
        }
        this[_state].pendingUnobservations = T$.JSArrayOfAtomL().of([]);
      }
    }
    enforceReadPolicy(atom) {
      if (!dart.test(dart.fn(() => {
        switch (this.config.readPolicy) {
          case C[21] || CT.C21:
          {
            if (!(dart.test(this[_state].isWithinBatch) || dart.test(this[_state].isWithinDerivation))) dart.assertFailed("Observable values cannot be read outside Actions and Reactions. Make sure to wrap them inside an action or a reaction. Tried to read: " + dart.str(atom.name), I[6], 181, 18, "_state.isWithinBatch || _state.isWithinDerivation");
            break;
          }
          case C[22] || CT.C22:
          {
            break;
          }
        }
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed(null, I[6], 178, 12, "() {\n      switch (config.readPolicy) {\n        case ReactiveReadPolicy.always:\n          assert(_state.isWithinBatch || _state.isWithinDerivation,\n              'Observable values cannot be read outside Actions and Reactions. Make sure to wrap them inside an action or a reaction. Tried to read: ${atom.name}');\n          break;\n\n        case ReactiveReadPolicy.never:\n          break;\n      }\n\n      return true;\n    }()");
    }
    enforceWritePolicy(atom) {
      if (dart.notNull(this[_state].computationDepth) > 0 && dart.test(atom.hasObservers)) {
        dart.throw(new core$.MobXException.new("Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + dart.str(atom.name)));
      }
      if (!dart.test(dart.fn(() => {
        switch (this.config.writePolicy) {
          case C[26] || CT.C26:
          {
            break;
          }
          case C[24] || CT.C24:
          {
            if (atom.hasObservers === false) {
              break;
            }
            if (!dart.test(this[_state].isWithinBatch)) dart.assertFailed("Side effects like changing state are not allowed at this point. Please wrap the code in an \"action\". Tried to modify: " + dart.str(atom.name), I[6], 214, 18, "_state.isWithinBatch");
            break;
          }
          case C[25] || CT.C25:
          {
            if (!dart.test(this[_state].isWithinBatch)) dart.assertFailed("Changing observable values outside actions is not allowed. Please wrap the code in an \"action\" if this change is intended. Tried to modify " + dart.str(atom.name), I[6], 219, 18, "_state.isWithinBatch");
          }
        }
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed(null, I[6], 204, 12, "() {\n      switch (config.writePolicy) {\n        case ReactiveWritePolicy.never:\n          break;\n\n        case ReactiveWritePolicy.observed:\n          if (atom.hasObservers == false) {\n            break;\n          }\n\n          assert(_state.isWithinBatch,\n              'Side effects like changing state are not allowed at this point. Please wrap the code in an \"action\". Tried to modify: ${atom.name}');\n          break;\n\n        case ReactiveWritePolicy.always:\n          assert(_state.isWithinBatch,\n              'Changing observable values outside actions is not allowed. Please wrap the code in an \"action\" if this change is intended. Tried to modify ${atom.name}');\n      }\n\n      return true;\n    }()");
    }
    [_startTracking](derivation) {
      let prevDerivation = this[_state].trackingDerivation;
      this[_state].trackingDerivation = derivation;
      this[_resetDerivationState](derivation);
      derivation[_newObservables] = T$.LinkedHashSetOfAtomL().new();
      return prevDerivation;
    }
    [_endTracking](currentDerivation, prevDerivation) {
      this[_state].trackingDerivation = prevDerivation;
      this[_bindDependencies](currentDerivation);
    }
    trackDerivation(T, d, fn) {
      let prevDerivation = this[_startTracking](d);
      let result = null;
      if (this.config.disableErrorBoundaries === true) {
        result = fn();
      } else {
        try {
          result = fn();
          d[_errorValue] = null;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          d[_errorValue] = new core$.MobXCaughtException.new(e, {stackTrace: s});
        }
      }
      this[_endTracking](d, prevDerivation);
      return result;
    }
    [_reportObserved](atom) {
      let t16;
      let derivation = this[_state].trackingDerivation;
      if (derivation != null) {
        derivation[_newObservables].add(atom);
        if (!dart.test(atom[_isBeingObserved])) {
          t16 = atom;
          (() => {
            t16[_isBeingObserved] = true;
            t16[_notifyOnBecomeObserved]();
            return t16;
          })();
        }
      }
    }
    [_bindDependencies](derivation) {
      let t16, t16$;
      let staleObservables = derivation[_observables].difference(derivation[_newObservables]);
      let newObservables = derivation[_newObservables].difference(derivation[_observables]);
      let lowestNewDerivationState = core$.DerivationState.upToDate;
      for (let observable of newObservables) {
        observable[_addObserver](derivation);
        if (T$.ComputedL().is(observable)) {
          if (dart.notNull(observable[_dependenciesState].index) > dart.notNull(lowestNewDerivationState.index)) {
            lowestNewDerivationState = observable[_dependenciesState];
          }
        }
      }
      for (let ob of staleObservables) {
        ob[_removeObserver](derivation);
      }
      if (lowestNewDerivationState != core$.DerivationState.upToDate) {
        t16 = derivation;
        (() => {
          t16[_dependenciesState] = lowestNewDerivationState;
          t16[_onBecomeStale]();
          return t16;
        })();
      }
      t16$ = derivation;
      (() => {
        t16$[_observables] = derivation[_newObservables];
        t16$[_newObservables] = T$.LinkedHashSetOfAtomL().new();
        return t16$;
      })();
    }
    addPendingReaction(reaction) {
      this[_state].pendingReactions[$add](reaction);
    }
    runReactions() {
      if (dart.notNull(this[_state].batch) > 0 || dart.test(this[_state].isRunningReactions)) {
        return;
      }
      this[_runReactionsInternal]();
    }
    [_runReactionsInternal]() {
      let t16;
      this[_state].isRunningReactions = true;
      let iterations = 0;
      let allReactions = this[_state].pendingReactions;
      while (dart.test(allReactions[$isNotEmpty])) {
        if ((iterations = iterations + 1) === this.config.maxIterations) {
          let failingReaction = allReactions[$_get](0);
          this[_resetState]();
          dart.throw(new core$.MobXCyclicReactionException.new("Reaction doesn't converge to a stable state after " + dart.str(this.config.maxIterations) + " iterations. Probably there is a cycle in the reactive function: " + dart.str(failingReaction)));
        }
        let remainingReactions = allReactions[$toList]({growable: false});
        allReactions[$clear]();
        for (let reaction of remainingReactions) {
          reaction[_run$]();
        }
      }
      t16 = this[_state];
      (() => {
        t16.pendingReactions = T$.JSArrayOfReactionL().of([]);
        t16.isRunningReactions = false;
        return t16;
      })();
    }
    propagateChanged(atom) {
      if (atom[_lowestObserverState] == core$.DerivationState.stale) {
        return;
      }
      atom[_lowestObserverState] = core$.DerivationState.stale;
      for (let observer of atom[_observers]) {
        if (observer[_dependenciesState] == core$.DerivationState.upToDate) {
          observer[_onBecomeStale]();
        }
        observer[_dependenciesState] = core$.DerivationState.stale;
      }
    }
    [_propagatePossiblyChanged](atom) {
      let t16;
      if (atom[_lowestObserverState] != core$.DerivationState.upToDate) {
        return;
      }
      atom[_lowestObserverState] = core$.DerivationState.possiblyStale;
      for (let observer of atom[_observers]) {
        if (observer[_dependenciesState] == core$.DerivationState.upToDate) {
          t16 = observer;
          (() => {
            t16[_dependenciesState] = core$.DerivationState.possiblyStale;
            t16[_onBecomeStale]();
            return t16;
          })();
        }
      }
    }
    [_propagateChangeConfirmed](atom) {
      if (atom[_lowestObserverState] == core$.DerivationState.stale) {
        return;
      }
      atom[_lowestObserverState] = core$.DerivationState.stale;
      for (let observer of atom[_observers]) {
        if (observer[_dependenciesState] == core$.DerivationState.possiblyStale) {
          observer[_dependenciesState] = core$.DerivationState.stale;
        } else if (observer[_dependenciesState] == core$.DerivationState.upToDate) {
          atom[_lowestObserverState] = core$.DerivationState.upToDate;
        }
      }
    }
    [_clearObservables](derivation) {
      let observables = derivation[_observables];
      derivation[_observables] = T$.LinkedHashSetOfAtomL().new();
      for (let x of observables) {
        x[_removeObserver](derivation);
      }
      derivation[_dependenciesState] = core$.DerivationState.notTracking;
    }
    [_enqueueForUnobservation](atom) {
      if (dart.test(atom[_isPendingUnobservation])) {
        return;
      }
      atom[_isPendingUnobservation] = true;
      this[_state].pendingUnobservations[$add](atom);
    }
    [_resetDerivationState](d) {
      if (d[_dependenciesState] == core$.DerivationState.upToDate) {
        return;
      }
      d[_dependenciesState] = core$.DerivationState.upToDate;
      for (let obs of d[_observables]) {
        obs[_lowestObserverState] = core$.DerivationState.upToDate;
      }
    }
    [_shouldCompute](derivation) {
      switch (derivation[_dependenciesState]) {
        case C[28] || CT.C28:
        {
          return false;
        }
        case C[29] || CT.C29:
        case C[30] || CT.C30:
        {
          return true;
        }
        case C[31] || CT.C31:
        {
          return this.untracked(T$.boolL(), dart.fn(() => {
            for (let obs of derivation[_observables]) {
              if (T$.ComputedL().is(obs)) {
                if (this.config.disableErrorBoundaries === true) {
                  obs.value;
                } else {
                  try {
                    obs.value;
                  } catch (e) {
                    let _ = dart.getThrown(e);
                    return true;
                  }
                }
                if (derivation[_dependenciesState] == core$.DerivationState.stale) {
                  return true;
                }
              }
            }
            this[_resetDerivationState](derivation);
            return false;
          }, T$.VoidToboolL()));
        }
      }
      return false;
    }
    [_hasCaughtException](d) {
      return T$.MobXCaughtExceptionL().is(d[_errorValue]);
    }
    isComputingDerivation() {
      return this[_state].trackingDerivation != null;
    }
    startUntracked() {
      let prevDerivation = this[_state].trackingDerivation;
      this[_state].trackingDerivation = null;
      return prevDerivation;
    }
    endUntracked(prevDerivation) {
      this[_state].trackingDerivation = prevDerivation;
    }
    untracked(T, fn) {
      let prevDerivation = this.startUntracked();
      try {
        return fn();
      } finally {
        this.endUntracked(prevDerivation);
      }
    }
    onReactionError(handler) {
      this.config[_reactionErrorHandlers].add(handler);
      return dart.fn(() => {
        this.config[_reactionErrorHandlers].removeWhere(dart.fn(f => dart.equals(f, handler), T$.FnToboolL$1()));
      }, T$.VoidToNull());
    }
    [_notifyReactionErrorHandlers](exception, reaction) {
      this.config[_reactionErrorHandlers][$forEach](dart.fn(f => {
        f(exception, reaction);
      }, T$.FnToNull()));
    }
    startAllowStateChanges(opts) {
      let allow = opts && 'allow' in opts ? opts.allow : null;
      let prevValue = this[_state].allowStateChanges;
      this[_state].allowStateChanges = allow;
      return prevValue;
    }
    endAllowStateChanges(opts) {
      let allow = opts && 'allow' in opts ? opts.allow : null;
      this[_state].allowStateChanges = allow;
    }
    [_pushComputation]() {
      let t17;
      t17 = this[_state];
      t17.computationDepth = dart.notNull(t17.computationDepth) + 1;
    }
    [_popComputation]() {
      let t17;
      t17 = this[_state];
      t17.computationDepth = dart.notNull(t17.computationDepth) - 1;
    }
    [_resetState]() {
      let t17;
      this[_state] = (t17 = new core$._ReactiveState.new(), (() => {
        t17.allowStateChanges = this[_config].writePolicy == core$.ReactiveWritePolicy.never;
        return t17;
      })());
    }
  };
  (core$.ReactiveContext.new = function(opts) {
    let t15;
    let config = opts && 'config' in opts ? opts.config : null;
    this[_config] = null;
    this[_state] = new core$._ReactiveState.new();
    this.config = (t15 = config, t15 == null ? core$.ReactiveConfig.main : t15);
  }).prototype = core$.ReactiveContext.prototype;
  dart.addTypeTests(core$.ReactiveContext);
  dart.addTypeCaches(core$.ReactiveContext);
  dart.setMethodSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getMethods(core$.ReactiveContext.__proto__),
    nameFor: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    spy: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(dart.fnType(dart.void, [dart.legacy(core$.SpyEvent)]))]),
    spyReport: dart.fnType(dart.void, [dart.legacy(core$.SpyEvent)]),
    startBatch: dart.fnType(dart.void, []),
    endBatch: dart.fnType(dart.void, []),
    enforceReadPolicy: dart.fnType(dart.void, [dart.legacy(core$.Atom)]),
    enforceWritePolicy: dart.fnType(dart.void, [dart.legacy(core$.Atom)]),
    [_startTracking]: dart.fnType(dart.legacy(core$.Derivation), [dart.legacy(core$.Derivation)]),
    [_endTracking]: dart.fnType(dart.void, [dart.legacy(core$.Derivation), dart.legacy(core$.Derivation)]),
    trackDerivation: dart.gFnType(T => [dart.legacy(T), [dart.legacy(core$.Derivation), dart.legacy(dart.fnType(dart.legacy(T), []))]]),
    [_reportObserved]: dart.fnType(dart.void, [dart.legacy(core$.Atom)]),
    [_bindDependencies]: dart.fnType(dart.void, [dart.legacy(core$.Derivation)]),
    addPendingReaction: dart.fnType(dart.void, [dart.legacy(core$.Reaction)]),
    runReactions: dart.fnType(dart.void, []),
    [_runReactionsInternal]: dart.fnType(dart.void, []),
    propagateChanged: dart.fnType(dart.void, [dart.legacy(core$.Atom)]),
    [_propagatePossiblyChanged]: dart.fnType(dart.void, [dart.legacy(core$.Atom)]),
    [_propagateChangeConfirmed]: dart.fnType(dart.void, [dart.legacy(core$.Atom)]),
    [_clearObservables]: dart.fnType(dart.void, [dart.legacy(core$.Derivation)]),
    [_enqueueForUnobservation]: dart.fnType(dart.void, [dart.legacy(core$.Atom)]),
    [_resetDerivationState]: dart.fnType(dart.void, [dart.legacy(core$.Derivation)]),
    [_shouldCompute]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core$.Derivation)]),
    [_hasCaughtException]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core$.Derivation)]),
    isComputingDerivation: dart.fnType(dart.legacy(core.bool), []),
    startUntracked: dart.fnType(dart.legacy(core$.Derivation), []),
    endUntracked: dart.fnType(dart.void, [dart.legacy(core$.Derivation)]),
    untracked: dart.gFnType(T => [dart.legacy(T), [dart.legacy(dart.fnType(dart.legacy(T), []))]]),
    onReactionError: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core$.Reaction)]))]),
    [_notifyReactionErrorHandlers]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core$.Reaction)]),
    startAllowStateChanges: dart.fnType(dart.legacy(core.bool), [], {allow: dart.legacy(core.bool)}, {}),
    endAllowStateChanges: dart.fnType(dart.void, [], {allow: dart.legacy(core.bool)}, {}),
    [_pushComputation]: dart.fnType(dart.void, []),
    [_popComputation]: dart.fnType(dart.void, []),
    [_resetState]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getGetters(core$.ReactiveContext.__proto__),
    config: dart.legacy(core$.ReactiveConfig),
    nextId: dart.legacy(core.int),
    isWithinBatch: dart.legacy(core.bool),
    isSpyEnabled: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getSetters(core$.ReactiveContext.__proto__),
    config: dart.legacy(core$.ReactiveConfig)
  }));
  dart.setLibraryUri(core$.ReactiveContext, I[5]);
  dart.setFieldSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getFields(core$.ReactiveContext.__proto__),
    [_config]: dart.fieldType(dart.legacy(core$.ReactiveConfig)),
    [_state]: dart.fieldType(dart.legacy(core$._ReactiveState))
  }));
  core$.DerivationState = class DerivationState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.DerivationState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.DerivationState.prototype;
  dart.addTypeTests(core$.DerivationState);
  dart.addTypeCaches(core$.DerivationState);
  dart.setMethodSignature(core$.DerivationState, () => ({
    __proto__: dart.getMethods(core$.DerivationState.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(core$.DerivationState, I[5]);
  dart.setFieldSignature(core$.DerivationState, () => ({
    __proto__: dart.getFields(core$.DerivationState.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(core$.DerivationState, ['toString']);
  core$.DerivationState.notTracking = C[29] || CT.C29;
  core$.DerivationState.upToDate = C[28] || CT.C28;
  core$.DerivationState.possiblyStale = C[31] || CT.C31;
  core$.DerivationState.stale = C[30] || CT.C30;
  core$.DerivationState.values = C[32] || CT.C32;
  core$.Derivation = class Derivation extends core.Object {};
  (core$.Derivation.new = function() {
    this[_observables] = null;
    this[_newObservables] = null;
    this[_errorValue] = null;
    this[_dependenciesState] = null;
    ;
  }).prototype = core$.Derivation.prototype;
  dart.addTypeTests(core$.Derivation);
  dart.addTypeCaches(core$.Derivation);
  dart.setLibraryUri(core$.Derivation, I[5]);
  dart.setFieldSignature(core$.Derivation, () => ({
    __proto__: dart.getFields(core$.Derivation.__proto__),
    [_observables]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core$.Atom)))),
    [_newObservables]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core$.Atom)))),
    [_errorValue]: dart.fieldType(dart.legacy(core$.MobXCaughtException)),
    [_dependenciesState]: dart.fieldType(dart.legacy(core$.DerivationState))
  }));
  var _handlers = dart.privateName(core$, "_handlers");
  var _canHandle = dart.privateName(core$, "_canHandle");
  const _is_NotificationHandlers_default = Symbol('_is_NotificationHandlers_default');
  core$.NotificationHandlers$ = dart.generic(TNotification => {
    class NotificationHandlers extends core.Object {
      add(handler) {
        let t17;
        T$.FunctionL().as(handler);
        if (!(handler != null)) dart.assertFailed(null, I[7], 11, 12, "handler != null");
        this[_handlers] == null ? this[_handlers] = new (T$._HashSetOfFunctionL()).new() : null;
        let listeners = (t17 = this[_handlers], (() => {
          t17.add(handler);
          return t17;
        })());
        return dart.fn(() => listeners.remove(handler), T$.VoidToboolL());
      }
      get hasHandlers() {
        let t17, t17$;
        t17$ = (t17 = this[_handlers], t17 == null ? null : t17[$isNotEmpty]);
        return t17$ == null ? false : t17$;
      }
      [_canHandle](notification) {
        if (!(notification != null)) dart.assertFailed(null, I[7], 22, 12, "notification != null");
        return this.hasHandlers;
      }
    }
    (NotificationHandlers.new = function(_context) {
      this[_handlers] = null;
      this[_context$1] = _context;
      if (!(_context != null)) dart.assertFailed(null, I[7], 4, 48, "_context != null");
      ;
    }).prototype = NotificationHandlers.prototype;
    dart.addTypeTests(NotificationHandlers);
    NotificationHandlers.prototype[_is_NotificationHandlers_default] = true;
    dart.addTypeCaches(NotificationHandlers);
    dart.setMethodSignature(NotificationHandlers, () => ({
      __proto__: dart.getMethods(NotificationHandlers.__proto__),
      add: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(core.Object)]),
      [_canHandle]: dart.fnType(dart.legacy(core.bool), [dart.legacy(TNotification)])
    }));
    dart.setGetterSignature(NotificationHandlers, () => ({
      __proto__: dart.getGetters(NotificationHandlers.__proto__),
      hasHandlers: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(NotificationHandlers, I[5]);
    dart.setFieldSignature(NotificationHandlers, () => ({
      __proto__: dart.getFields(NotificationHandlers.__proto__),
      [_context$1]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
      [_handlers]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core.Function))))
    }));
    return NotificationHandlers;
  });
  core$.NotificationHandlers = core$.NotificationHandlers$();
  dart.addTypeTests(core$.NotificationHandlers, _is_NotificationHandlers_default);
  var equals$0 = dart.privateName(core$, "Observable.equals");
  var _interceptors$ = dart.privateName(core$, "_interceptors");
  var _listeners$ = dart.privateName(core$, "_listeners");
  var _prepareNewValue = dart.privateName(core$, "_prepareNewValue");
  const _is_Observable_default = Symbol('_is_Observable_default');
  core$.Observable$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var InterceptorsOfTL = () => (InterceptorsOfTL = dart.constFn(core$.Interceptors$(TL())))();
    var ChangeNotificationOfTL = () => (ChangeNotificationOfTL = dart.constFn(core$.ChangeNotification$(TL())))();
    var ChangeNotificationLOfTL = () => (ChangeNotificationLOfTL = dart.constFn(dart.legacy(ChangeNotificationOfTL())))();
    var ListenersOfChangeNotificationLOfTL = () => (ListenersOfChangeNotificationLOfTL = dart.constFn(core$.Listeners$(ChangeNotificationLOfTL())))();
    var WillChangeNotificationOfTL = () => (WillChangeNotificationOfTL = dart.constFn(core$.WillChangeNotification$(TL())))();
    var WillChangeNotificationLOfTL = () => (WillChangeNotificationLOfTL = dart.constFn(dart.legacy(WillChangeNotificationOfTL())))();
    var WillChangeNotificationLOfTLToWillChangeNotificationLOfTL = () => (WillChangeNotificationLOfTLToWillChangeNotificationLOfTL = dart.constFn(dart.fnType(WillChangeNotificationLOfTL(), [WillChangeNotificationLOfTL()])))();
    var WillChangeNotificationLOfTLToLWillChangeNotificationLOfTL = () => (WillChangeNotificationLOfTLToLWillChangeNotificationLOfTL = dart.constFn(dart.legacy(WillChangeNotificationLOfTLToWillChangeNotificationLOfTL())))();
    class Observable extends core$.Atom {
      get equals() {
        return this[equals$0];
      }
      set equals(value) {
        super.equals = value;
      }
      static new(initialValue, opts) {
        let t17;
        let name = opts && 'name' in opts ? opts.name : null;
        let context = opts && 'context' in opts ? opts.context : null;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        return new (core$.Observable$(dart.legacy(T))).__((t17 = context, t17 == null ? context$.mainContext : t17), initialValue, {name: name, equals: equals});
      }
      get value() {
        this[_context$1].enforceReadPolicy(this);
        this.reportObserved();
        return this[_value$];
      }
      set value(value) {
        TL().as(value);
        this[_context$1].enforceWritePolicy(this);
        let oldValue = this[_value$];
        let newValue = this[_prepareNewValue](value);
        if (dart.equals(newValue, core$.WillChangeNotification.unchanged)) {
          return;
        }
        let notifySpy = this[_context$1].isSpyEnabled;
        if (dart.test(notifySpy)) {
          this[_context$1].spyReport(new core$.ObservableValueSpyEvent.new(this, {newValue: newValue, oldValue: oldValue, name: this.name}));
        }
        this[_value$] = TL().as(newValue);
        this.reportChanged();
        if (dart.test(this[_listeners$].hasHandlers)) {
          let change = new (ChangeNotificationOfTL()).new({newValue: value, oldValue: oldValue, type: core$.OperationType.update, object: this});
          this[_listeners$].notifyListeners(change);
        }
        if (dart.test(notifySpy)) {
          this[_context$1].spyReport(new core$.EndedSpyEvent.new({type: "observable", name: this.name}));
        }
      }
      [_prepareNewValue](newValue) {
        let t18, t17;
        let prepared = newValue;
        if (dart.test(this[_interceptors$].hasHandlers)) {
          let change = this[_interceptors$].interceptChange(new (WillChangeNotificationOfTL()).new({newValue: prepared, type: core$.OperationType.update, object: this}));
          if (change == null) {
            return core$.WillChangeNotification.unchanged;
          }
          prepared = TL().as(change.newValue);
        }
        let areEqual = this.equals == null ? dart.equals(prepared, this.value) : (t17 = prepared, t18 = this[_value$], this.equals(t17, t18));
        return !dart.test(areEqual) ? prepared : core$.WillChangeNotification.unchanged;
      }
      observe(listener, opts) {
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
        if (fireImmediately === true) {
          listener(new (ChangeNotificationOfTL()).new({type: core$.OperationType.update, newValue: this[_value$], oldValue: null, object: this}));
        }
        return this[_listeners$].add(listener);
      }
      intercept(interceptor) {
        WillChangeNotificationLOfTLToLWillChangeNotificationLOfTL().as(interceptor);
        return this[_interceptors$].add(interceptor);
      }
    }
    (Observable.__ = function(context, _value, opts) {
      let t17;
      let name = opts && 'name' in opts ? opts.name : null;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      this[_value$] = _value;
      this[equals$0] = equals;
      this[_interceptors$] = new (InterceptorsOfTL()).new(context);
      this[_listeners$] = new (ListenersOfChangeNotificationLOfTL()).new(context);
      Observable.__proto__.__.call(this, context, {name: (t17 = name, t17 == null ? context.nameFor("Observable") : t17)});
      if (dart.test(this[_context$1].isSpyEnabled)) {
        this[_context$1].spyReport(new core$.ObservableValueSpyEvent.new(this, {newValue: this[_value$], name: this.name, isEnd: true}));
      }
    }).prototype = Observable.prototype;
    dart.addTypeTests(Observable);
    Observable.prototype[_is_Observable_default] = true;
    dart.addTypeCaches(Observable);
    Observable[dart.implements] = () => [core$.Interceptable$(dart.legacy(T)), core$.Listenable$(dart.legacy(core$.ChangeNotification$(dart.legacy(T)))), core$.ObservableValue$(dart.legacy(T))];
    dart.setMethodSignature(Observable, () => ({
      __proto__: dart.getMethods(Observable.__proto__),
      [_prepareNewValue]: dart.fnType(dart.dynamic, [dart.legacy(T)]),
      observe: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(dart.fnType(dart.void, [dart.legacy(core$.ChangeNotification$(dart.legacy(T)))]))], {fireImmediately: dart.legacy(core.bool)}, {}),
      intercept: dart.fnType(dart.legacy(dart.fnType(dart.void, [])), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(Observable, () => ({
      __proto__: dart.getGetters(Observable.__proto__),
      value: dart.legacy(T)
    }));
    dart.setSetterSignature(Observable, () => ({
      __proto__: dart.getSetters(Observable.__proto__),
      value: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(Observable, I[5]);
    dart.setFieldSignature(Observable, () => ({
      __proto__: dart.getFields(Observable.__proto__),
      [_interceptors$]: dart.finalFieldType(dart.legacy(core$.Interceptors$(dart.legacy(T)))),
      [_listeners$]: dart.finalFieldType(dart.legacy(core$.Listeners$(dart.legacy(core$.ChangeNotification$(dart.legacy(T)))))),
      equals: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T), dart.legacy(T)]))),
      [_value$]: dart.fieldType(dart.legacy(T))
    }));
    return Observable;
  });
  core$.Observable = core$.Observable$();
  dart.addTypeTests(core$.Observable, _is_Observable_default);
  const _is_ObservableValue_default = Symbol('_is_ObservableValue_default');
  core$.ObservableValue$ = dart.generic(T => {
    class ObservableValue extends core.Object {}
    (ObservableValue.new = function() {
      ;
    }).prototype = ObservableValue.prototype;
    dart.addTypeTests(ObservableValue);
    ObservableValue.prototype[_is_ObservableValue_default] = true;
    dart.addTypeCaches(ObservableValue);
    dart.setLibraryUri(ObservableValue, I[5]);
    return ObservableValue;
  });
  core$.ObservableValue = core$.ObservableValue$();
  dart.addTypeTests(core$.ObservableValue, _is_ObservableValue_default);
  core$.Reaction = class Reaction extends core.Object {};
  (core$.Reaction.new = function() {
    ;
  }).prototype = core$.Reaction.prototype;
  dart.addTypeTests(core$.Reaction);
  dart.addTypeCaches(core$.Reaction);
  core$.Reaction[dart.implements] = () => [core$.Derivation];
  dart.setLibraryUri(core$.Reaction, I[5]);
  var name$2 = dart.privateName(core$, "ReactionImpl.name");
  var _onError$ = dart.privateName(core$, "_onError");
  var _onInvalidate = dart.privateName(core$, "_onInvalidate");
  var _isScheduled = dart.privateName(core$, "_isScheduled");
  var _isDisposed = dart.privateName(core$, "_isDisposed");
  var _isRunning = dart.privateName(core$, "_isRunning");
  var _reportException = dart.privateName(core$, "_reportException");
  core$.ReactionImpl = class ReactionImpl extends core.Object {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get hasObservables() {
      return this[_observables][$isNotEmpty];
    }
    get errorValue() {
      return this[_errorValue];
    }
    get isDisposed() {
      return this[_isDisposed];
    }
    [_onBecomeStale]() {
      this.schedule();
    }
    startTracking() {
      this[_context$1].startBatch();
      this[_isRunning] = true;
      return this[_context$1][_startTracking](this);
    }
    endTracking(previous) {
      this[_context$1][_endTracking](this, previous);
      this[_isRunning] = false;
      if (dart.test(this[_isDisposed])) {
        this[_context$1][_clearObservables](this);
      }
      this[_context$1].endBatch();
    }
    track(fn) {
      this[_context$1].startBatch();
      let notify = this[_context$1].isSpyEnabled;
      let startTime = null;
      if (dart.test(notify)) {
        startTime = new core.DateTime.now();
        this[_context$1].spyReport(new core$.ReactionSpyEvent.new({name: this.name}));
      }
      this[_isRunning] = true;
      this[_context$1].trackDerivation(dart.void, this, fn);
      this[_isRunning] = false;
      if (dart.test(this[_isDisposed])) {
        this[_context$1][_clearObservables](this);
      }
      if (dart.test(this[_context$1][_hasCaughtException](this))) {
        this[_reportException](this[_errorValue]);
      }
      if (dart.test(notify)) {
        this[_context$1].spyReport(new core$.EndedSpyEvent.new({type: "reaction", name: this.name, duration: new core.DateTime.now().difference(startTime)}));
      }
      this[_context$1].endBatch();
    }
    [_run$]() {
      if (dart.test(this[_isDisposed])) {
        return;
      }
      this[_context$1].startBatch();
      this[_isScheduled] = false;
      if (dart.test(this[_context$1][_shouldCompute](this))) {
        try {
          this[_onInvalidate]();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          this[_errorValue] = new core$.MobXCaughtException.new(e, {stackTrace: s});
          this[_reportException](this[_errorValue]);
        }
      }
      this[_context$1].endBatch();
    }
    dispose() {
      let t18;
      if (dart.test(this[_isDisposed])) {
        return;
      }
      this[_isDisposed] = true;
      if (dart.test(this[_isRunning])) {
        return;
      }
      this[_context$1].spyReport(new core$.ReactionDisposedSpyEvent.new({name: this.name}));
      t18 = this[_context$1];
      (() => {
        t18.startBatch();
        t18[_clearObservables](this);
        t18.endBatch();
        return t18;
      })();
    }
    schedule() {
      let t18;
      if (dart.test(this[_isScheduled])) {
        return;
      }
      this[_isScheduled] = true;
      t18 = this[_context$1];
      (() => {
        t18.addPendingReaction(this);
        t18.runReactions();
        return t18;
      })();
    }
    [_suspend]() {
    }
    [_reportException](exception) {
      let t18;
      if (this[_onError$] != null) {
        t18 = exception;
        this[_onError$](t18, this);
        return;
      }
      if (this[_context$1].config.disableErrorBoundaries === true) {
        dart.throw(exception);
      }
      if (dart.test(this[_context$1].isSpyEnabled)) {
        this[_context$1].spyReport(new core$.ReactionErrorSpyEvent.new(exception, {name: this.name}));
      }
      this[_context$1][_notifyReactionErrorHandlers](exception, this);
    }
  };
  (core$.ReactionImpl.new = function(_context, onInvalidate, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[_onError$] = null;
    this[_onInvalidate] = null;
    this[_isScheduled] = false;
    this[_isDisposed] = false;
    this[_isRunning] = false;
    this[_newObservables] = null;
    this[_observables] = T$.LinkedHashSetOfAtomL().new();
    this[_dependenciesState] = core$.DerivationState.notTracking;
    this[_errorValue] = null;
    this[_context$1] = _context;
    this[name$2] = name;
    if (!(_context != null)) dart.assertFailed(null, I[8], 14, 16, "_context != null");
    if (!(onInvalidate != null)) dart.assertFailed(null, I[8], 15, 16, "onInvalidate != null");
    this[_onInvalidate] = onInvalidate;
    this[_onError$] = onError;
  }).prototype = core$.ReactionImpl.prototype;
  dart.addTypeTests(core$.ReactionImpl);
  dart.addTypeCaches(core$.ReactionImpl);
  core$.ReactionImpl[dart.implements] = () => [core$.Reaction];
  dart.setMethodSignature(core$.ReactionImpl, () => ({
    __proto__: dart.getMethods(core$.ReactionImpl.__proto__),
    [_onBecomeStale]: dart.fnType(dart.void, []),
    startTracking: dart.fnType(dart.legacy(core$.Derivation), []),
    endTracking: dart.fnType(dart.void, [dart.legacy(core$.Derivation)]),
    track: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
    [_run$]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    schedule: dart.fnType(dart.void, []),
    [_suspend]: dart.fnType(dart.void, []),
    [_reportException]: dart.fnType(dart.void, [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(core$.ReactionImpl, () => ({
    __proto__: dart.getGetters(core$.ReactionImpl.__proto__),
    hasObservables: dart.legacy(core.bool),
    errorValue: dart.legacy(core$.MobXCaughtException),
    isDisposed: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(core$.ReactionImpl, I[5]);
  dart.setFieldSignature(core$.ReactionImpl, () => ({
    __proto__: dart.getFields(core$.ReactionImpl.__proto__),
    [_onError$]: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core$.ReactionImpl)]))),
    [_context$1]: dart.finalFieldType(dart.legacy(core$.ReactiveContext)),
    [_onInvalidate]: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
    [_isScheduled]: dart.fieldType(dart.legacy(core.bool)),
    [_isDisposed]: dart.fieldType(dart.legacy(core.bool)),
    [_isRunning]: dart.fieldType(dart.legacy(core.bool)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    [_newObservables]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core$.Atom)))),
    [_observables]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(core$.Atom)))),
    [_dependenciesState]: dart.fieldType(dart.legacy(core$.DerivationState)),
    [_errorValue]: dart.fieldType(dart.legacy(core$.MobXCaughtException))
  }));
  var reaction$0 = dart.privateName(core$, "ReactionDisposer.reaction");
  core$.ReactionDisposer = class ReactionDisposer extends core.Object {
    get reaction() {
      return this[reaction$0];
    }
    set reaction(value) {
      super.reaction = value;
    }
    call() {
      return this.reaction.dispose();
    }
  };
  (core$.ReactionDisposer.new = function(reaction) {
    this[reaction$0] = reaction;
    ;
  }).prototype = core$.ReactionDisposer.prototype;
  dart.addTypeTests(core$.ReactionDisposer);
  dart.addTypeCaches(core$.ReactionDisposer);
  dart.setMethodSignature(core$.ReactionDisposer, () => ({
    __proto__: dart.getMethods(core$.ReactionDisposer.__proto__),
    call: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(core$.ReactionDisposer, I[5]);
  dart.setFieldSignature(core$.ReactionDisposer, () => ({
    __proto__: dart.getFields(core$.ReactionDisposer.__proto__),
    reaction: dart.finalFieldType(dart.legacy(core$.Reaction))
  }));
  const _is_Interceptable_default = Symbol('_is_Interceptable_default');
  core$.Interceptable$ = dart.generic(T => {
    class Interceptable extends core.Object {}
    (Interceptable.new = function() {
      ;
    }).prototype = Interceptable.prototype;
    dart.addTypeTests(Interceptable);
    Interceptable.prototype[_is_Interceptable_default] = true;
    dart.addTypeCaches(Interceptable);
    dart.setLibraryUri(Interceptable, I[5]);
    return Interceptable;
  });
  core$.Interceptable = core$.Interceptable$();
  dart.addTypeTests(core$.Interceptable, _is_Interceptable_default);
  const _is_Interceptors_default = Symbol('_is_Interceptors_default');
  core$.Interceptors$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var WillChangeNotificationOfTL = () => (WillChangeNotificationOfTL = dart.constFn(core$.WillChangeNotification$(TL())))();
    var WillChangeNotificationLOfTL = () => (WillChangeNotificationLOfTL = dart.constFn(dart.legacy(WillChangeNotificationOfTL())))();
    var WillChangeNotificationLOfTLToWillChangeNotificationLOfTL = () => (WillChangeNotificationLOfTLToWillChangeNotificationLOfTL = dart.constFn(dart.fnType(WillChangeNotificationLOfTL(), [WillChangeNotificationLOfTL()])))();
    var WillChangeNotificationLOfTLToLWillChangeNotificationLOfTL = () => (WillChangeNotificationLOfTLToLWillChangeNotificationLOfTL = dart.constFn(dart.legacy(WillChangeNotificationLOfTLToWillChangeNotificationLOfTL())))();
    var VoidToWillChangeNotificationLOfTL = () => (VoidToWillChangeNotificationLOfTL = dart.constFn(dart.fnType(WillChangeNotificationLOfTL(), [])))();
    class Interceptors extends core$.NotificationHandlers$(dart.legacy(core$.WillChangeNotification$(dart.legacy(T)))) {
      add(handler) {
        WillChangeNotificationLOfTLToLWillChangeNotificationLOfTL().as(handler);
        return super.add(handler);
      }
      interceptChange(change) {
        WillChangeNotificationLOfTL().as(change);
        if (!dart.test(this[_canHandle](change))) {
          return change;
        }
        return this[_context$1].untracked(T$.WillChangeNotificationL(), dart.fn(() => {
          let nextChange = change;
          for (let interceptor of this[_handlers][$toList]({growable: false})) {
            nextChange = WillChangeNotificationLOfTL().as(dart.dcall(interceptor, [nextChange]));
            if (nextChange == null) {
              break;
            }
          }
          return nextChange;
        }, VoidToWillChangeNotificationLOfTL()));
      }
    }
    (Interceptors.new = function(context) {
      Interceptors.__proto__.new.call(this, context);
      ;
    }).prototype = Interceptors.prototype;
    dart.addTypeTests(Interceptors);
    Interceptors.prototype[_is_Interceptors_default] = true;
    dart.addTypeCaches(Interceptors);
    dart.setMethodSignature(Interceptors, () => ({
      __proto__: dart.getMethods(Interceptors.__proto__),
      interceptChange: dart.fnType(dart.legacy(core$.WillChangeNotification), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(Interceptors, I[5]);
    return Interceptors;
  });
  core$.Interceptors = core$.Interceptors$();
  dart.addTypeTests(core$.Interceptors, _is_Interceptors_default);
  const _is_Listenable_default = Symbol('_is_Listenable_default');
  core$.Listenable$ = dart.generic(TNotification => {
    class Listenable extends core.Object {}
    (Listenable.new = function() {
      ;
    }).prototype = Listenable.prototype;
    dart.addTypeTests(Listenable);
    Listenable.prototype[_is_Listenable_default] = true;
    dart.addTypeCaches(Listenable);
    dart.setLibraryUri(Listenable, I[5]);
    return Listenable;
  });
  core$.Listenable = core$.Listenable$();
  dart.addTypeTests(core$.Listenable, _is_Listenable_default);
  const _is_Listeners_default = Symbol('_is_Listeners_default');
  core$.Listeners$ = dart.generic(TNotification => {
    var TNotificationL = () => (TNotificationL = dart.constFn(dart.legacy(TNotification)))();
    var TNotificationLTovoid = () => (TNotificationLTovoid = dart.constFn(dart.fnType(dart.void, [TNotificationL()])))();
    var TNotificationLToLvoid = () => (TNotificationLToLvoid = dart.constFn(dart.legacy(TNotificationLTovoid())))();
    class Listeners extends core$.NotificationHandlers$(dart.legacy(TNotification)) {
      add(handler) {
        TNotificationLToLvoid().as(handler);
        return super.add(handler);
      }
      notifyListeners(change) {
        TNotificationL().as(change);
        if (!dart.test(this[_canHandle](change))) {
          return;
        }
        this[_context$1].untracked(core.Null, dart.fn(() => {
          for (let listener of this[_handlers][$toList]({growable: false})) {
            dart.dcall(listener, [change]);
          }
        }, T$.VoidToNull()));
      }
    }
    (Listeners.new = function(context) {
      Listeners.__proto__.new.call(this, context);
      ;
    }).prototype = Listeners.prototype;
    dart.addTypeTests(Listeners);
    Listeners.prototype[_is_Listeners_default] = true;
    dart.addTypeCaches(Listeners);
    dart.setMethodSignature(Listeners, () => ({
      __proto__: dart.getMethods(Listeners.__proto__),
      notifyListeners: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(Listeners, I[5]);
    return Listeners;
  });
  core$.Listeners = core$.Listeners$();
  dart.addTypeTests(core$.Listeners, _is_Listeners_default);
  var object$3 = dart.privateName(core$, "SpyEvent.object");
  var name$3 = dart.privateName(core$, "SpyEvent.name");
  var type$4 = dart.privateName(core$, "SpyEvent.type");
  var duration$ = dart.privateName(core$, "SpyEvent.duration");
  var isStart$ = dart.privateName(core$, "SpyEvent.isStart");
  var isEnd$ = dart.privateName(core$, "SpyEvent.isEnd");
  core$.SpyEvent = class SpyEvent extends core.Object {
    get object() {
      return this[object$3];
    }
    set object(value) {
      super.object = value;
    }
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$4];
    }
    set type(value) {
      super.type = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get isStart() {
      return this[isStart$];
    }
    set isStart(value) {
      super.isStart = value;
    }
    get isEnd() {
      return this[isEnd$];
    }
    set isEnd(value) {
      super.isEnd = value;
    }
    get sentinel() {
      let hasStart = this.isStart != null && this.isStart === true && (this.isEnd == null || this.isEnd === false);
      let hasEnd = this.isEnd != null && this.isEnd === true && (this.isStart == null || this.isStart === false);
      if (hasStart) {
        return "(START)";
      }
      if (hasEnd) {
        return "(END" + (this.duration == null ? "" : " after " + dart.str(this.duration.inMilliseconds) + "ms") + ")";
      }
      return "";
    }
    toString() {
      return dart.str(this.type) + dart.str(this.sentinel) + " " + dart.str(this.name);
    }
  };
  (core$.SpyEvent.__ = function(object, opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let isStart = opts && 'isStart' in opts ? opts.isStart : null;
    let isEnd = opts && 'isEnd' in opts ? opts.isEnd : null;
    this[object$3] = object;
    this[type$4] = type;
    this[name$3] = name;
    this[duration$] = duration;
    this[isStart$] = isStart;
    this[isEnd$] = isEnd;
    ;
  }).prototype = core$.SpyEvent.prototype;
  dart.addTypeTests(core$.SpyEvent);
  dart.addTypeCaches(core$.SpyEvent);
  dart.setMethodSignature(core$.SpyEvent, () => ({
    __proto__: dart.getMethods(core$.SpyEvent.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(core$.SpyEvent, () => ({
    __proto__: dart.getGetters(core$.SpyEvent.__proto__),
    sentinel: dart.legacy(core.String)
  }));
  dart.setLibraryUri(core$.SpyEvent, I[5]);
  dart.setFieldSignature(core$.SpyEvent, () => ({
    __proto__: dart.getFields(core$.SpyEvent.__proto__),
    object: dart.finalFieldType(dart.dynamic),
    name: dart.finalFieldType(dart.legacy(core.String)),
    type: dart.finalFieldType(dart.legacy(core.String)),
    duration: dart.finalFieldType(dart.legacy(core.Duration)),
    isStart: dart.finalFieldType(dart.legacy(core.bool)),
    isEnd: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(core$.SpyEvent, ['toString']);
  var newValue$3 = dart.privateName(core$, "ObservableValueSpyEvent.newValue");
  var oldValue$2 = dart.privateName(core$, "ObservableValueSpyEvent.oldValue");
  core$.ObservableValueSpyEvent = class ObservableValueSpyEvent extends core$.SpyEvent {
    get newValue() {
      return this[newValue$3];
    }
    set newValue(value) {
      super.newValue = value;
    }
    get oldValue() {
      return this[oldValue$2];
    }
    set oldValue(value) {
      super.oldValue = value;
    }
    toString() {
      return dart.str(super.toString()) + "=" + dart.str(this.newValue) + ", previously=" + dart.str(this.oldValue);
    }
  };
  (core$.ObservableValueSpyEvent.new = function(object, opts) {
    let newValue = opts && 'newValue' in opts ? opts.newValue : null;
    let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let isEnd = opts && 'isEnd' in opts ? opts.isEnd : null;
    this[newValue$3] = newValue;
    this[oldValue$2] = oldValue;
    core$.ObservableValueSpyEvent.__proto__.__.call(this, object, {type: "observable", name: name, isStart: true, isEnd: isEnd});
    ;
  }).prototype = core$.ObservableValueSpyEvent.prototype;
  dart.addTypeTests(core$.ObservableValueSpyEvent);
  dart.addTypeCaches(core$.ObservableValueSpyEvent);
  dart.setLibraryUri(core$.ObservableValueSpyEvent, I[5]);
  dart.setFieldSignature(core$.ObservableValueSpyEvent, () => ({
    __proto__: dart.getFields(core$.ObservableValueSpyEvent.__proto__),
    newValue: dart.finalFieldType(dart.dynamic),
    oldValue: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(core$.ObservableValueSpyEvent, ['toString']);
  core$.ComputedValueSpyEvent = class ComputedValueSpyEvent extends core$.SpyEvent {};
  (core$.ComputedValueSpyEvent.new = function(object, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    core$.ComputedValueSpyEvent.__proto__.__.call(this, object, {type: "computed", name: name, isStart: true, isEnd: true});
    ;
  }).prototype = core$.ComputedValueSpyEvent.prototype;
  dart.addTypeTests(core$.ComputedValueSpyEvent);
  dart.addTypeCaches(core$.ComputedValueSpyEvent);
  dart.setLibraryUri(core$.ComputedValueSpyEvent, I[5]);
  core$.ReactionSpyEvent = class ReactionSpyEvent extends core$.SpyEvent {};
  (core$.ReactionSpyEvent.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    core$.ReactionSpyEvent.__proto__.__.call(this, null, {type: "reaction", name: name, isStart: true});
    ;
  }).prototype = core$.ReactionSpyEvent.prototype;
  dart.addTypeTests(core$.ReactionSpyEvent);
  dart.addTypeCaches(core$.ReactionSpyEvent);
  dart.setLibraryUri(core$.ReactionSpyEvent, I[5]);
  var error$ = dart.privateName(core$, "ReactionErrorSpyEvent.error");
  core$.ReactionErrorSpyEvent = class ReactionErrorSpyEvent extends core$.SpyEvent {
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    toString() {
      return dart.str(super.toString()) + " " + dart.str(this.error);
    }
  };
  (core$.ReactionErrorSpyEvent.new = function(error, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    this[error$] = error;
    core$.ReactionErrorSpyEvent.__proto__.__.call(this, null, {type: "reaction-error", name: name, isStart: true, isEnd: true});
    ;
  }).prototype = core$.ReactionErrorSpyEvent.prototype;
  dart.addTypeTests(core$.ReactionErrorSpyEvent);
  dart.addTypeCaches(core$.ReactionErrorSpyEvent);
  dart.setLibraryUri(core$.ReactionErrorSpyEvent, I[5]);
  dart.setFieldSignature(core$.ReactionErrorSpyEvent, () => ({
    __proto__: dart.getFields(core$.ReactionErrorSpyEvent.__proto__),
    error: dart.finalFieldType(dart.legacy(core.Object))
  }));
  dart.defineExtensionMethods(core$.ReactionErrorSpyEvent, ['toString']);
  core$.ReactionDisposedSpyEvent = class ReactionDisposedSpyEvent extends core$.SpyEvent {};
  (core$.ReactionDisposedSpyEvent.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    core$.ReactionDisposedSpyEvent.__proto__.__.call(this, null, {type: "reaction-dispose", name: name, isStart: true, isEnd: true});
    ;
  }).prototype = core$.ReactionDisposedSpyEvent.prototype;
  dart.addTypeTests(core$.ReactionDisposedSpyEvent);
  dart.addTypeCaches(core$.ReactionDisposedSpyEvent);
  dart.setLibraryUri(core$.ReactionDisposedSpyEvent, I[5]);
  core$.ActionSpyEvent = class ActionSpyEvent extends core$.SpyEvent {};
  (core$.ActionSpyEvent.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    core$.ActionSpyEvent.__proto__.__.call(this, null, {type: "action", name: name, isStart: true});
    ;
  }).prototype = core$.ActionSpyEvent.prototype;
  dart.addTypeTests(core$.ActionSpyEvent);
  dart.addTypeCaches(core$.ActionSpyEvent);
  dart.setLibraryUri(core$.ActionSpyEvent, I[5]);
  core$.EndedSpyEvent = class EndedSpyEvent extends core$.SpyEvent {};
  (core$.EndedSpyEvent.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    core$.EndedSpyEvent.__proto__.__.call(this, null, {type: type, name: name, duration: duration, isEnd: true});
    ;
  }).prototype = core$.EndedSpyEvent.prototype;
  dart.addTypeTests(core$.EndedSpyEvent);
  dart.addTypeCaches(core$.EndedSpyEvent);
  dart.setLibraryUri(core$.EndedSpyEvent, I[5]);
  core$['ConditionalAction|conditionallyRunInAction'] = function ConditionalAction$124conditionallyRunInAction($this, fn, atom, opts) {
    let t20, t19;
    let name = opts && 'name' in opts ? opts.name : null;
    let actionController = opts && 'actionController' in opts ? opts.actionController : null;
    if (dart.test($this.isWithinBatch)) {
      $this.enforceWritePolicy(atom);
      fn();
    } else {
      let controller = (t19 = actionController, t19 == null ? new core$.ActionController.new({context: $this, name: (t20 = name, t20 == null ? $this.nameFor("conditionallyRunInAction") : t20)}) : t19);
      let runInfo = controller.startAction();
      try {
        $this.enforceWritePolicy(atom);
        fn();
      } finally {
        controller.endAction(runInfo);
      }
    }
  };
  core$['ConditionalAction|get#conditionallyRunInAction'] = function ConditionalAction$124get$35conditionallyRunInAction($this) {
    return dart.fn((fn, atom, opts) => {
      let name = opts && 'name' in opts ? opts.name : null;
      let actionController = opts && 'actionController' in opts ? opts.actionController : null;
      return core$['ConditionalAction|conditionallyRunInAction']($this, fn, atom, {name: name, actionController: actionController});
    }, T$.FnAndAtomL__Tovoid());
  };
  core$.createAutorun = function createAutorun(context, trackingFn, opts) {
    let t20;
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let rxn = null;
    let rxnName = (t20 = name, t20 == null ? context.nameFor("Autorun") : t20);
    if (delay == null) {
      rxn = new core$.ReactionImpl.new(context, dart.fn(() => {
        rxn.track(dart.fn(() => trackingFn(rxn), T$.VoidTodynamic()));
      }, T$.VoidToNull()), {name: rxnName, onError: onError});
    } else {
      let scheduler = utils.createDelayedScheduler(delay);
      let isScheduled = false;
      let timer = null;
      rxn = new core$.ReactionImpl.new(context, dart.fn(() => {
        if (!isScheduled) {
          isScheduled = true;
          if (timer != null) {
            timer.cancel();
            timer = null;
          }
          timer = scheduler(dart.fn(() => {
            isScheduled = false;
            if (!dart.test(rxn.isDisposed)) {
              rxn.track(dart.fn(() => trackingFn(rxn), T$.VoidTodynamic()));
            } else {
              timer.cancel();
            }
          }, T$.VoidToNull()));
        }
      }, T$.VoidToNull()), {name: rxnName, onError: onError});
    }
    rxn.schedule();
    return new core$.ReactionDisposer.new(rxn);
  };
  core$.createReaction = function createReaction(T, context, fn, effect, opts) {
    let t20;
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
    let equals = opts && 'equals' in opts ? opts.equals : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let rxn = null;
    let rxnName = (t20 = name, t20 == null ? context.nameFor("Reaction") : t20);
    let effectAction = core$.Action.new(dart.fn(value => effect(value), dart.fnType(dart.void, [dart.legacy(T)])), {name: dart.str(rxnName) + "-effect"});
    let runSync = delay == null;
    let scheduler = delay != null ? utils.createDelayedScheduler(delay) : null;
    let firstTime = true;
    let value = null;
    function reactionRunner() {
      if (dart.test(rxn.isDisposed)) {
        return;
      }
      let changed = false;
      rxn.track(dart.fn(() => {
        let nextValue = fn(rxn);
        let isEqual = equals != null ? equals(nextValue, value) : dart.equals(nextValue, value);
        changed = firstTime || !dart.test(isEqual);
        value = nextValue;
      }, T$.VoidToNull()));
      let canInvokeEffect = firstTime && fireImmediately === true || !firstTime && changed;
      if (canInvokeEffect) {
        effectAction.call([value]);
      }
      if (firstTime) {
        firstTime = false;
      }
    }
    dart.fn(reactionRunner, T$.VoidTovoid());
    let timer = null;
    let isScheduled = false;
    rxn = new core$.ReactionImpl.new(context, dart.fn(() => {
      if (firstTime || runSync) {
        reactionRunner();
      } else if (!isScheduled) {
        isScheduled = true;
        if (timer != null) {
          timer.cancel();
          timer = null;
        }
        timer = scheduler(dart.fn(() => {
          isScheduled = false;
          if (!dart.test(rxn.isDisposed)) {
            reactionRunner();
          } else {
            timer.cancel();
          }
        }, T$.VoidToNull()));
      }
    }, T$.VoidToNull()), {name: rxnName, onError: onError});
    rxn.schedule();
    return new core$.ReactionDisposer.new(rxn);
  };
  core$.createWhenReaction = function createWhenReaction(context, predicate, effect, opts) {
    let t20;
    let name = opts && 'name' in opts ? opts.name : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let rxnName = (t20 = name, t20 == null ? context.nameFor("When") : t20);
    let effectAction = core$.Action.new(effect, {name: dart.str(rxnName) + "-effect"});
    let timer = null;
    let dispose = null;
    if (timeout != null) {
      timer = async.Timer.new(utils.ms['*'](timeout), dart.fn(() => {
        if (!dart.test(dispose.reaction.isDisposed)) {
          dispose.call();
          let error = new core$.MobXException.new("WHEN_TIMEOUT");
          if (onError != null) {
            onError(error, dispose.reaction);
          } else {
            dart.throw(error);
          }
        }
      }, T$.VoidToNull()));
    }
    return dispose = core$.createAutorun(context, dart.fn(reaction => {
      if (dart.test(predicate(reaction))) {
        reaction.dispose();
        if (timer != null) {
          timer.cancel();
          timer = null;
        }
        effectAction.call();
      }
    }, T$.ReactionLToNull()), {name: rxnName, onError: onError});
  };
  core$.createAsyncWhenReaction = function createAsyncWhenReaction(context, predicate, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let completer = T$.CompleterOfvoid().new();
    core$.createWhenReaction(context, predicate, dart.bind(completer, 'complete'), {name: name, timeout: timeout, onError: dart.fn((error, reaction) => {
        reaction.dispose();
        completer.completeError(error);
      }, T$.ObjectLAndReactionLToNull())});
    return completer.future;
  };
  core$._once = function _once(fn) {
    let invoked = false;
    return dart.fn(() => {
      if (invoked) {
        return;
      }
      invoked = true;
      dart.dcall(fn, []);
    }, T$.VoidToNull());
  };
  dart.copyProperties(core$, {
    get _isDebugMode() {
      let debug = false;
      if (!dart.test(dart.fn(() => {
        debug = true;
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed(null, I[9], 112, 10, "() {\n    debug = true;\n    return true;\n  }()");
      return debug;
    }
  });
  context$.createContext = function createContext(opts) {
    let config = opts && 'config' in opts ? opts.config : null;
    return new core$.ReactiveContext.new({config: config});
  };
  dart.defineLazy(context$, {
    /*context$.mainContext*/get mainContext() {
      return context$.createContext({config: core$.ReactiveConfig.main});
    }
  }, true);
  action.runInAction = function runInAction(T, fn, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let context = opts && 'context' in opts ? opts.context : null;
    return dart.legacy(T).as(core$.Action.new(fn, {name: name, context: context}).call());
  };
  action.untracked = function untracked(T, fn, opts) {
    let t20;
    let context = opts && 'context' in opts ? opts.context : null;
    return (t20 = context, t20 == null ? context$.mainContext : t20).untracked(dart.legacy(T), fn);
  };
  action.transaction = function transaction(T, fn, opts) {
    let t20, t20$;
    let context = opts && 'context' in opts ? opts.context : null;
    let ctx = (t20$ = (t20 = context, t20 == null ? context$.mainContext : t20), (() => {
      t20$.startBatch();
      return t20$;
    })());
    try {
      return fn();
    } finally {
      ctx.endBatch();
    }
  };
  dart.defineLazy(mobx, {
    /*mobx.version*/get version() {
      return "1.2.1+4";
    }
  }, true);
  dart.trackLibraries("packages/mobx/src/api/extensions.dart", {
    "package:mobx/src/api/extensions.dart": extensions,
    "package:mobx/src/core/atom_extensions.dart": atom_extensions,
    "package:mobx/src/api/reaction.dart": reaction,
    "package:mobx/src/api/observable_collections.dart": observable_collections,
    "package:mobx/src/api/async.dart": async$,
    "package:mobx/src/core.dart": core$,
    "package:mobx/src/api/context.dart": context$,
    "package:mobx/src/api/action.dart": action,
    "package:mobx/mobx.dart": mobx
  }, {
    "package:mobx/src/api/extensions.dart": ["extensions/observable_stream_extension.dart", "extensions/observable_future_extension.dart", "extensions/observable_list_extension.dart", "extensions/observable_set_extension.dart", "extensions/observable_map_extension.dart"],
    "package:mobx/src/api/observable_collections.dart": ["observable_collections/observable_list.dart", "observable_collections/observable_map.dart", "observable_collections/observable_set.dart"],
    "package:mobx/src/api/async.dart": ["async/async_action.dart", "async/observable_future.dart", "async/observable_stream.dart"],
    "package:mobx/src/core.dart": ["core/action.dart", "core/atom.dart", "core/computed.dart", "core/context.dart", "core/context_extensions.dart", "core/derivation.dart", "core/notification_handlers.dart", "core/observable.dart", "core/observable_value.dart", "core/reaction.dart", "core/reaction_helper.dart", "interceptable.dart", "listenable.dart", "core/spy.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["extensions/observable_future_extension.dart","extensions/observable_list_extension.dart","extensions/observable_map_extension.dart","extensions/observable_set_extension.dart","extensions/observable_stream_extension.dart","../core/atom_extensions.dart","reaction.dart","observable_collections/observable_list.dart","observable_collections/observable_map.dart","observable_collections/observable_set.dart","async/async_action.dart","async/observable_future.dart","async/observable_stream.dart","../core.dart","../core/action.dart","../core/atom.dart","../core/computed.dart","../core/context.dart","../core/derivation.dart","../core/notification_handlers.dart","../core/observable.dart","../core/observable_value.dart","../core/reaction.dart","../core/reaction_helper.dart","../interceptable.dart","../listenable.dart","../core/spy.dart","../core/context_extensions.dart","context.dart","action.dart","../../mobx.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/mobx/src/api/extensions.dart.lib.js"}');
  // Exports:
  return {
    src__api__extensions: extensions,
    src__core__atom_extensions: atom_extensions,
    src__api__reaction: reaction,
    src__api__observable_collections: observable_collections,
    src__api__async: async$,
    src__core: core$,
    src__api__context: context$,
    src__api__action: action,
    mobx: mobx
  };
}));

//# sourceMappingURL=extensions.dart.lib.js.map
